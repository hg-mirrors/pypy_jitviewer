[b235450e14d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165000 +0  4157415641554154415341524151415057565554535251504889E341BBD01BF30041FFD34889DF4883E4F041BB60C4D30041FFD3488D65D8415F415E415D415C5B5DC3
[b235451eb57] jit-backend-dump}
[b235451fe75] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165043 +0  4157415641554154415341524151415057565554535251504889E341BB801BF30041FFD34889DF4883E4F041BB60C4D30041FFD3488D65D8415F415E415D415C5B5DC3
[b23545214cd] jit-backend-dump}
[b2354524175] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165086 +0  4157415641554154415341524151415057565554535251504889E34881EC80000000F20F110424F20F114C2408F20F11542410F20F115C2418F20F11642420F20F116C2428F20F11742430F20F117C2438F2440F11442440F2440F114C2448F2440F11542450F2440F115C2458F2440F11642460F2440F116C2468F2440F11742470F2440F117C247841BBD01BF30041FFD34889DF4883E4F041BB60C4D30041FFD3488D65D8415F415E415D415C5B5DC3
[b2354526575] jit-backend-dump}
[b23545272ef] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165137 +0  4157415641554154415341524151415057565554535251504889E34881EC80000000F20F110424F20F114C2408F20F11542410F20F115C2418F20F11642420F20F116C2428F20F11742430F20F117C2438F2440F11442440F2440F114C2448F2440F11542450F2440F115C2458F2440F11642460F2440F116C2468F2440F11742470F2440F117C247841BB801BF30041FFD34889DF4883E4F041BB60C4D30041FFD3488D65D8415F415E415D415C5B5DC3
[b235452931d] jit-backend-dump}
[b235452c095] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165210 +0  41BBE01AF30041FFD3B803000000488D65D8415F415E415D415C5B5DC3
[b235452cfbb] jit-backend-dump}
[b2354533197] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f491416522d +0  F20F11442410F20F114C2418F20F11542420F20F115C2428F20F11642430F20F116C2438F20F11742440F20F117C2448F2440F11442450F2440F114C2458F2440F11542460F2440F115C2468F2440F11642470F2440F116C2478F2440F11B42480000000F2440F11BC24880000004829C24C8955B048894D80488975904C8945A04C894DA848897D984889D741BB1096CF0041FFE3
[b2354534fd1] jit-backend-dump}
[b235453a431] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141652c2 +0  4C8B55B0488B4D80488B75904C8B45A04C8B4DA8488B7D98F20F10442410F20F104C2418F20F10542420F20F105C2428F20F10642430F20F106C2438F20F10742440F20F107C2448F2440F10442450F2440F104C2458F2440F10542460F2440F105C2468F2440F10642470F2440F106C2478F2440F10B42480000000F2440F10BC24880000004885C07409488B142530255601C349BB10521614497F000041FFE3
[b235453c0ad] jit-backend-dump}
[b235453e3d7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165363 +0  57565251415041514883EC40F20F110424F20F114C2408F20F11542410F20F115C2418F20F11642420F20F116C2428F20F11742430F20F117C24384889E741BBD036A90041FFD3488B0425A046A0024885C0753CF20F107C2438F20F10742430F20F106C2428F20F10642420F20F105C2418F20F10542410F20F104C2408F20F1004244883C44041594158595A5E5FC341BB801BF30041FFD3B8030000004883C478C3
[b23545400b3] jit-backend-dump}
[b2354540e4b] {jit-backend-counts
[b23545411c9] jit-backend-counts}
[b2354a7a4cd] {jit-backend
[b2355001144] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165406 +0  488B04254045A0024829E0483B0425E03C5101760D49BB63531614497F000041FFD3554889E5534154415541564157488DA50000000049BBF0C0FB16497F00004D8B3B4983C70149BBF0C0FB16497F00004D893B4C8B7F504C8B77784C0FB6AF960000004C8B67604C8B97800000004C8B4F584C8B4768498B5810498B50184D8B40204889BD70FFFFFF4889B568FFFFFF4C89BD60FFFFFF4C89A558FFFFFF4C898D50FFFFFF48899548FFFFFF4C898540FFFFFF49BB08C1FB16497F00004D8B034983C00149BB08C1FB16497F00004D89034983FA010F85000000004883FB017206813BF82200000F85000000004983FD000F850000000049BB48B92814497F00004D39DE0F85000000004C8B73084981FE4F0400000F8D000000004983C601488B1C254845A0024883FB000F8C0000000049BB20C1FB16497F0000498B1B4883C30149BB20C1FB16497F000049891B4981FE4F0400000F8D000000004983C601488B1C254845A0024883FB000F8C00000000E9BAFFFFFF49BB00501614497F000041FFD32944404838354C510C5458030400000049BB00501614497F000041FFD344400C4838354C5458030500000049BB00501614497F000041FFD335444048384C0C58030600000049BB00501614497F000041FFD3444038484C0C58030700000049BB00501614497F000041FFD344400C484C030800000049BB00501614497F000041FFD34440484C39030900000049BB00501614497F000041FFD34440484C39030A00000049BB00501614497F000041FFD34440484C39030B00000049BB00501614497F000041FFD34440484C3907030C00000049BB00501614497F000041FFD34440484C3907030D000000
[b235501e631] jit-backend-dump}
[b235501ef40] {jit-backend-addr
Loop 0 (<code object f, file 'source.py', line 4> #9 LOAD_FAST) has address 7f491416543c to 7f491416557e (bootstrap 7f4914165406)
[b23550204a9] jit-backend-addr}
[b2355021154] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165438 +0  40FFFFFF
[b2355021ebc] jit-backend-dump}
[b23550229de] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141654de +0  9C000000
[b23550234a3] jit-backend-dump}
[b2355023932] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141654f0 +0  A7000000
[b23550242e6] jit-backend-dump}
[b235502472a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141654fa +0  B8000000
[b23550250a8] jit-backend-dump}
[b23550254ef] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f491416550d +0  BF000000
[b2355026083] jit-backend-dump}
[b23550265e4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f491416551e +0  C7000000
[b23550270c7] jit-backend-dump}
[b23550277cf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165534 +0  DF000000
[b2355028126] jit-backend-dump}
[b2355028573] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f491416555f +0  CB000000
[b2355028ee2] jit-backend-dump}
[b2355029398] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165575 +0  E4000000
[b2355029d01] jit-backend-dump}
[b235502a970] jit-backend}
[b235502de9e] {jit-log-opt-loop
# Loop 0 (<code object f, file 'source.py', line 4> #9 LOAD_FAST) : loop with 53 ops
[p0, p1]
+84: p2 = getfield_gc(p0, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_last_exception 80>)
+88: p3 = getfield_gc(p0, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_pycode 120>)
+92: i4 = getfield_gc(p0, descr=<FieldU pypy.interpreter.pyframe.PyFrame.inst_is_being_profiled 150>)
+100: p5 = getfield_gc(p0, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_lastblock 96>)
+104: i6 = getfield_gc(p0, descr=<FieldS pypy.interpreter.pyframe.PyFrame.inst_valuestackdepth 128>)
+111: i7 = getfield_gc(p0, descr=<FieldS pypy.interpreter.pyframe.PyFrame.inst_last_instr 88>)
+115: p8 = getfield_gc(p0, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_locals_stack_w 104>)
+119: p10 = getarrayitem_gc(p8, 0, descr=<ArrayP 8>)
+123: p12 = getarrayitem_gc(p8, 1, descr=<ArrayP 8>)
+127: p14 = getarrayitem_gc(p8, 2, descr=<ArrayP 8>)
+131: p15 = getfield_gc(p0, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_cells 40>)
+131: label(p0, p1, p2, p3, i4, p5, i6, i7, p10, p12, p14, descr=TargetToken(139951847702960))
debug_merge_point(0, '<code object f. file 'source.py'. line 4> #9 LOAD_FAST')
+210: guard_value(i6, 1, descr=<Guard4>) [i6, p1, p0, p2, p3, i4, p5, i7, p10, p12, p14]
+220: guard_nonnull_class(p10, ConstClass(W_IntObject), descr=<Guard5>) [p1, p0, p10, p2, p3, i4, p5, p12, p14]
+238: guard_value(i4, 0, descr=<Guard6>) [i4, p1, p0, p2, p3, p5, p10, p14]
debug_merge_point(0, '<code object f. file 'source.py'. line 4> #12 LOAD_CONST')
+248: guard_value(p3, ConstPtr(ptr19), descr=<Guard7>) [p1, p0, p3, p2, p5, p10, p14]
debug_merge_point(0, '<code object f. file 'source.py'. line 4> #15 COMPARE_OP')
+267: i20 = getfield_gc_pure(p10, descr=<FieldS pypy.objspace.std.intobject.W_IntObject.inst_intval 8>)
+271: i22 = int_lt(i20, 1103)
guard_true(i22, descr=<Guard8>) [p1, p0, p10, p2, p5]
debug_merge_point(0, '<code object f. file 'source.py'. line 4> #18 POP_JUMP_IF_FALSE')
debug_merge_point(0, '<code object f. file 'source.py'. line 4> #21 LOAD_FAST')
debug_merge_point(0, '<code object f. file 'source.py'. line 4> #24 LOAD_CONST')
debug_merge_point(0, '<code object f. file 'source.py'. line 4> #27 INPLACE_ADD')
+284: i24 = int_add(i20, 1)
debug_merge_point(0, '<code object f. file 'source.py'. line 4> #28 STORE_FAST')
debug_merge_point(0, '<code object f. file 'source.py'. line 4> #31 JUMP_ABSOLUTE')
+288: guard_not_invalidated(, descr=<Guard9>) [p1, p0, p2, p5, i24]
+288: i26 = getfield_raw(44057928, descr=<FieldS pypysig_long_struct.c_value 0>)
+296: i28 = int_lt(i26, 0)
guard_false(i28, descr=<Guard10>) [p1, p0, p2, p5, i24]
debug_merge_point(0, '<code object f. file 'source.py'. line 4> #9 LOAD_FAST')
+306: label(p0, p1, p2, p5, i24, descr=TargetToken(139951847703040))
debug_merge_point(0, '<code object f. file 'source.py'. line 4> #9 LOAD_FAST')
debug_merge_point(0, '<code object f. file 'source.py'. line 4> #12 LOAD_CONST')
debug_merge_point(0, '<code object f. file 'source.py'. line 4> #15 COMPARE_OP')
+336: i29 = int_lt(i24, 1103)
guard_true(i29, descr=<Guard11>) [p1, p0, p2, p5, i24]
debug_merge_point(0, '<code object f. file 'source.py'. line 4> #18 POP_JUMP_IF_FALSE')
debug_merge_point(0, '<code object f. file 'source.py'. line 4> #21 LOAD_FAST')
debug_merge_point(0, '<code object f. file 'source.py'. line 4> #24 LOAD_CONST')
debug_merge_point(0, '<code object f. file 'source.py'. line 4> #27 INPLACE_ADD')
+349: i30 = int_add(i24, 1)
debug_merge_point(0, '<code object f. file 'source.py'. line 4> #28 STORE_FAST')
debug_merge_point(0, '<code object f. file 'source.py'. line 4> #31 JUMP_ABSOLUTE')
+353: guard_not_invalidated(, descr=<Guard12>) [p1, p0, p2, p5, i30, None]
+353: i32 = getfield_raw(44057928, descr=<FieldS pypysig_long_struct.c_value 0>)
+361: i33 = int_lt(i32, 0)
guard_false(i33, descr=<Guard13>) [p1, p0, p2, p5, i30, None]
debug_merge_point(0, '<code object f. file 'source.py'. line 4> #9 LOAD_FAST')
+371: jump(p0, p1, p2, p5, i30, descr=TargetToken(139951847703040))
+376: --end of the loop--
[b23550c78d9] jit-log-opt-loop}
[b2355422029] {jit-backend
[b2355483d2a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f
[b235548d018] jit-backend-dump}
[b235548dd80] {jit-backend-addr
Loop 1 (<code object inlined_call, file 'source.py', line 14> #9 LOAD_FAST) has address 7f49141656bc to 7f4914165854 (bootstrap 7f4914165686)
[b235548eba2] jit-backend-addr}
[b235548f46c] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141656b8 +0  40FFFFFF
[b2355490198] jit-backend-dump}
[b2355490b31] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165757 +0  F9000000
[b235549d335] jit-backend-dump}
[b235549d962] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165769 +0  04010000
[b235549e4d8] jit-backend-dump}
[b235549ea21] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165773 +0  15010000
[b235549f4e3] jit-backend-dump}
[b235549f933] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165786 +0  1C010000
[b23554a02cf] jit-backend-dump}
[b23554a070a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165797 +0  24010000
[b23554a108e] jit-backend-dump}
[b23554a15ef] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141657ae +0  24010000
[b23554a2123] jit-backend-dump}
[b23554a2693] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141657c5 +0  25010000
[b23554a302f] jit-backend-dump}
[b23554a3623] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141657e6 +0  35010000
[b23554a4145] jit-backend-dump}
[b23554a46a3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141657f4 +0  42010000
[b23554a5186] jit-backend-dump}
[b23554a571d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f491416580a +0  5F010000
[b23554a62e4] jit-backend-dump}
[b23554a682a] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165835 +0  4D010000
[b23554a723e] jit-backend-dump}
[b23554a776f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f491416584b +0  65010000
[b23554a815c] jit-backend-dump}
[b23554a8b5b] jit-backend}
[b23554aab05] {jit-log-opt-loop
# Loop 1 (<code object inlined_call, file 'source.py', line 14> #9 LOAD_FAST) : loop with 76 ops
[p0, p1]
+84: p2 = getfield_gc(p0, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_last_exception 80>)
+88: p3 = getfield_gc(p0, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_pycode 120>)
+92: i4 = getfield_gc(p0, descr=<FieldU pypy.interpreter.pyframe.PyFrame.inst_is_being_profiled 150>)
+100: p5 = getfield_gc(p0, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_lastblock 96>)
+104: i6 = getfield_gc(p0, descr=<FieldS pypy.interpreter.pyframe.PyFrame.inst_valuestackdepth 128>)
+111: i7 = getfield_gc(p0, descr=<FieldS pypy.interpreter.pyframe.PyFrame.inst_last_instr 88>)
+115: p8 = getfield_gc(p0, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_locals_stack_w 104>)
+119: p10 = getarrayitem_gc(p8, 0, descr=<ArrayP 8>)
+123: p12 = getarrayitem_gc(p8, 1, descr=<ArrayP 8>)
+127: p14 = getarrayitem_gc(p8, 2, descr=<ArrayP 8>)
+131: p15 = getfield_gc(p0, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_cells 40>)
+131: label(p0, p1, p2, p3, i4, p5, i6, i7, p10, p12, p14, descr=TargetToken(139951847708240))
debug_merge_point(0, '<code object inlined_call. file 'source.py'. line 14> #9 LOAD_FAST')
+203: guard_value(i6, 1, descr=<Guard14>) [i6, p1, p0, p2, p3, i4, p5, i7, p10, p12, p14]
+213: guard_nonnull_class(p10, ConstClass(W_IntObject), descr=<Guard15>) [p1, p0, p10, p2, p3, i4, p5, p12, p14]
+231: guard_value(i4, 0, descr=<Guard16>) [i4, p1, p0, p2, p3, p5, p10, p14]
debug_merge_point(0, '<code object inlined_call. file 'source.py'. line 14> #12 LOAD_CONST')
+241: guard_value(p3, ConstPtr(ptr19), descr=<Guard17>) [p1, p0, p3, p2, p5, p10, p14]
debug_merge_point(0, '<code object inlined_call. file 'source.py'. line 14> #15 COMPARE_OP')
+260: i20 = getfield_gc_pure(p10, descr=<FieldS pypy.objspace.std.intobject.W_IntObject.inst_intval 8>)
+264: i22 = int_lt(i20, 1103)
guard_true(i22, descr=<Guard18>) [p1, p0, p10, p2, p5]
debug_merge_point(0, '<code object inlined_call. file 'source.py'. line 14> #18 POP_JUMP_IF_FALSE')
debug_merge_point(0, '<code object inlined_call. file 'source.py'. line 14> #21 LOAD_GLOBAL')
+277: p23 = getfield_gc(p0, descr=<FieldP pypy.interpreter.eval.Frame.inst_w_globals 8>)
+281: guard_value(p23, ConstPtr(ptr24), descr=<Guard19>) [p1, p0, p23, p2, p5, p10]
+300: p25 = getfield_gc(p23, descr=<FieldP pypy.objspace.std.dictmultiobject.W_DictMultiObject.inst_strategy 16>)
+304: guard_value(p25, ConstPtr(ptr26), descr=<Guard20>) [p1, p0, p25, p23, p2, p5, p10]
+323: guard_not_invalidated(, descr=<Guard21>) [p1, p0, p23, p2, p5, p10]
debug_merge_point(0, '<code object inlined_call. file 'source.py'. line 14> #24 LOAD_FAST')
debug_merge_point(0, '<code object inlined_call. file 'source.py'. line 14> #27 CALL_FUNCTION')
+323: p28 = call(ConstClass(getexecutioncontext), descr=<Callr 8 EF=1>)
+339: p29 = getfield_gc(p28, descr=<FieldP pypy.interpreter.executioncontext.ExecutionContext.inst_topframeref 64>)
+343: i30 = force_token()
+343: p31 = getfield_gc(p28, descr=<FieldP pypy.interpreter.executioncontext.ExecutionContext.inst_w_tracefunc 80>)
+347: guard_isnull(p31, descr=<Guard22>) [p1, p0, p28, p31, p2, p5, p10, p29, i30]
+356: i32 = getfield_gc(p28, descr=<FieldU pypy.interpreter.executioncontext.ExecutionContext.inst_profilefunc 40>)
+360: i33 = int_is_zero(i32)
guard_true(i33, descr=<Guard23>) [p1, p0, p28, p2, p5, p10, p29, i30]
debug_merge_point(1, '<code object inner. file 'source.py'. line 11> #0 LOAD_FAST')
debug_merge_point(1, '<code object inner. file 'source.py'. line 11> #3 LOAD_CONST')
debug_merge_point(1, '<code object inner. file 'source.py'. line 11> #6 BINARY_ADD')
+370: i35 = int_add(i20, 1)
debug_merge_point(1, '<code object inner. file 'source.py'. line 11> #7 RETURN_VALUE')
debug_merge_point(0, '<code object inlined_call. file 'source.py'. line 14> #30 STORE_FAST')
debug_merge_point(0, '<code object inlined_call. file 'source.py'. line 14> #33 JUMP_ABSOLUTE')
+374: guard_not_invalidated(, descr=<Guard24>) [p1, p0, p2, p5, i35, None, None]
+374: i38 = getfield_raw(44057928, descr=<FieldS pypysig_long_struct.c_value 0>)
+382: i40 = int_lt(i38, 0)
guard_false(i40, descr=<Guard25>) [p1, p0, p2, p5, i35, None, None]
debug_merge_point(0, '<code object inlined_call. file 'source.py'. line 14> #9 LOAD_FAST')
+392: p41 = same_as(ConstPtr(ptr26))
+392: label(p0, p1, p2, p5, i35, descr=TargetToken(139951847708320))
debug_merge_point(0, '<code object inlined_call. file 'source.py'. line 14> #9 LOAD_FAST')
debug_merge_point(0, '<code object inlined_call. file 'source.py'. line 14> #12 LOAD_CONST')
debug_merge_point(0, '<code object inlined_call. file 'source.py'. line 14> #15 COMPARE_OP')
+422: i42 = int_lt(i35, 1103)
guard_true(i42, descr=<Guard26>) [p1, p0, p2, p5, i35]
debug_merge_point(0, '<code object inlined_call. file 'source.py'. line 14> #18 POP_JUMP_IF_FALSE')
debug_merge_point(0, '<code object inlined_call. file 'source.py'. line 14> #21 LOAD_GLOBAL')
+435: guard_not_invalidated(, descr=<Guard27>) [p1, p0, p2, p5, i35]
debug_merge_point(0, '<code object inlined_call. file 'source.py'. line 14> #24 LOAD_FAST')
debug_merge_point(0, '<code object inlined_call. file 'source.py'. line 14> #27 CALL_FUNCTION')
+435: i43 = force_token()
debug_merge_point(1, '<code object inner. file 'source.py'. line 11> #0 LOAD_FAST')
debug_merge_point(1, '<code object inner. file 'source.py'. line 11> #3 LOAD_CONST')
debug_merge_point(1, '<code object inner. file 'source.py'. line 11> #6 BINARY_ADD')
+435: i44 = int_add(i35, 1)
debug_merge_point(1, '<code object inner. file 'source.py'. line 11> #7 RETURN_VALUE')
debug_merge_point(0, '<code object inlined_call. file 'source.py'. line 14> #30 STORE_FAST')
debug_merge_point(0, '<code object inlined_call. file 'source.py'. line 14> #33 JUMP_ABSOLUTE')
+439: i45 = getfield_raw(44057928, descr=<FieldS pypysig_long_struct.c_value 0>)
+447: i46 = int_lt(i45, 0)
guard_false(i46, descr=<Guard28>) [p1, p0, p2, p5, i44, None]
debug_merge_point(0, '<code object inlined_call. file 'source.py'. line 14> #9 LOAD_FAST')
+457: jump(p0, p1, p2, p5, i44, descr=TargetToken(139951847708320))
+462: --end of the loop--
[b23554f4407] jit-log-opt-loop}
[b2355508b55] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141657c9 +0  E939010000
[b235550a5ef] jit-backend-dump}
[b235550aba4] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141657fc +0  E953010000
[b235550b843] jit-backend-dump}
[b235550bd68] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165839 +0  E95F010000
[b2355510f73] jit-backend-dump}
[b23557b5993] {jit-backend
[b23558255a5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141659cc
[b235582e8eb] jit-backend-dump}
[b235582eeef] {jit-backend-addr
Loop 2 (<code object uninlined_call, file 'source.py', line 21> #19 FOR_ITER) has address 7f4914165a02 to 7f4914165bdf (bootstrap 7f49141659cc)
[b235582fc15] jit-backend-addr}
[b2355830257] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141659fe +0  30FFFFFF
[b2355830f57] jit-backend-dump}
[b2355831627] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165ab3 +0  28010000
[b2355832055] jit-backend-dump}
[b2355832495] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165abf +0  3B010000
[b2355832f9b] jit-backend-dump}
[b2355833483] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165acc +0  4B010000
[b2355833ee5] jit-backend-dump}
[b23558343cb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165ae0 +0  55010000
[b2355834d9b] jit-backend-dump}
[b235583538d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165afa +0  5B010000
[b2355835ced] jit-backend-dump}
[b23558360cd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165b03 +0  73010000
[b2355836949] jit-backend-dump}
[b2355836e33] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165b22 +0  74010000
[b235583792d] jit-backend-dump}
[b2355837dfb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165b34 +0  7F010000
[b2355838777] jit-backend-dump}
[b2355838b41] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165b47 +0  87010000
[b23558393b9] jit-backend-dump}
[b2355839787] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165b55 +0  94010000
[b235583a01d] jit-backend-dump}
[b235583a49d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165b67 +0  B5010000
[b235583adb7] jit-backend-dump}
[b235583b297] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165b95 +0  A0010000
[b23558439b9] jit-backend-dump}
[b23558440af] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165bb7 +0  9A010000
[b2355844afd] jit-backend-dump}
[b2355844fdd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165bc9 +0  BE010000
[b2355845893] jit-backend-dump}
[b2355846087] jit-backend}
[b2355847e7b] {jit-log-opt-loop
# Loop 2 (<code object uninlined_call, file 'source.py', line 21> #19 FOR_ITER) : loop with 73 ops
[p0, p1]
+84: p2 = getfield_gc(p0, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_last_exception 80>)
+88: p3 = getfield_gc(p0, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_pycode 120>)
+92: i4 = getfield_gc(p0, descr=<FieldU pypy.interpreter.pyframe.PyFrame.inst_is_being_profiled 150>)
+100: p5 = getfield_gc(p0, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_lastblock 96>)
+104: i6 = getfield_gc(p0, descr=<FieldS pypy.interpreter.pyframe.PyFrame.inst_valuestackdepth 128>)
+111: i7 = getfield_gc(p0, descr=<FieldS pypy.interpreter.pyframe.PyFrame.inst_last_instr 88>)
+115: p8 = getfield_gc(p0, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_locals_stack_w 104>)
+119: p10 = getarrayitem_gc(p8, 0, descr=<ArrayP 8>)
+123: p12 = getarrayitem_gc(p8, 1, descr=<ArrayP 8>)
+127: p14 = getarrayitem_gc(p8, 2, descr=<ArrayP 8>)
+131: p16 = getarrayitem_gc(p8, 3, descr=<ArrayP 8>)
+135: p18 = getarrayitem_gc(p8, 4, descr=<ArrayP 8>)
+139: p19 = getfield_gc(p0, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_cells 40>)
+139: label(p0, p1, p2, p3, i4, p5, i6, i7, p10, p12, p14, p16, p18, descr=TargetToken(139951847709440))
debug_merge_point(0, '<code object uninlined_call. file 'source.py'. line 21> #19 FOR_ITER')
+225: guard_value(i6, 3, descr=<Guard29>) [i6, p1, p0, p2, p3, i4, p5, i7, p10, p12, p14, p16, p18]
+235: guard_class(p14, 38562496, descr=<Guard30>) [p1, p0, p14, p2, p3, i4, p5, p10, p12, p16, p18]
+247: p22 = getfield_gc(p14, descr=<FieldP pypy.objspace.std.iterobject.W_AbstractSeqIterObject.inst_w_seq 16>)
+251: guard_nonnull(p22, descr=<Guard31>) [p1, p0, p14, p22, p2, p3, i4, p5, p10, p12, p16, p18]
+260: i23 = getfield_gc(p14, descr=<FieldS pypy.objspace.std.iterobject.W_AbstractSeqIterObject.inst_index 8>)
+264: p24 = getfield_gc(p22, descr=<FieldP pypy.objspace.std.listobject.W_ListObject.inst_strategy 16>)
+268: guard_class(p24, 38745240, descr=<Guard32>) [p1, p0, p14, i23, p24, p22, p2, p3, i4, p5, p10, p12, p16, p18]
+280: p26 = getfield_gc(p22, descr=<FieldP pypy.objspace.std.listobject.W_ListObject.inst_lstorage 8>)
+284: i27 = getfield_gc_pure(p26, descr=<FieldS tuple3.item0 8>)
+288: i28 = getfield_gc_pure(p26, descr=<FieldS tuple3.item1 16>)
+292: i29 = getfield_gc_pure(p26, descr=<FieldS tuple3.item2 24>)
+296: i31 = int_lt(i23, 0)
guard_false(i31, descr=<Guard33>) [p1, p0, p14, i23, i29, i28, i27, p2, p3, i4, p5, p10, p12, p16, p18]
+306: i32 = int_ge(i23, i29)
guard_false(i32, descr=<Guard34>) [p1, p0, p14, i23, i28, i27, p2, p3, i4, p5, p10, p12, p16, p18]
+315: i33 = int_mul(i23, i28)
+322: i34 = int_add(i27, i33)
+328: i36 = int_add(i23, 1)
+332: setfield_gc(p14, i36, descr=<FieldS pypy.objspace.std.iterobject.W_AbstractSeqIterObject.inst_index 8>)
+336: guard_value(i4, 0, descr=<Guard35>) [i4, p1, p0, p2, p3, p5, p10, p12, p14, p18, i34]
debug_merge_point(0, '<code object uninlined_call. file 'source.py'. line 21> #22 STORE_FAST')
debug_merge_point(0, '<code object uninlined_call. file 'source.py'. line 21> #25 LOAD_FAST')
+346: guard_nonnull_class(p10, ConstClass(W_IntObject), descr=<Guard36>) [p1, p0, p10, p2, p3, p5, p14, p18, i34]
debug_merge_point(0, '<code object uninlined_call. file 'source.py'. line 21> #28 LOAD_CONST')
+364: guard_value(p3, ConstPtr(ptr39), descr=<Guard37>) [p1, p0, p3, p2, p5, p10, p14, p18, i34]
debug_merge_point(0, '<code object uninlined_call. file 'source.py'. line 21> #31 INPLACE_ADD')
+383: i40 = getfield_gc_pure(p10, descr=<FieldS pypy.objspace.std.intobject.W_IntObject.inst_intval 8>)
+387: i42 = int_add_ovf(i40, 1)
guard_no_overflow(, descr=<Guard38>) [p1, p0, p10, i42, p2, p5, p14, i34]
debug_merge_point(0, '<code object uninlined_call. file 'source.py'. line 21> #32 STORE_FAST')
debug_merge_point(0, '<code object uninlined_call. file 'source.py'. line 21> #35 JUMP_ABSOLUTE')
+397: guard_not_invalidated(, descr=<Guard39>) [p1, p0, p2, p5, p14, i42, i34]
+397: i44 = getfield_raw(44057928, descr=<FieldS pypysig_long_struct.c_value 0>)
+405: i46 = int_lt(i44, 0)
guard_false(i46, descr=<Guard40>) [p1, p0, p2, p5, p14, i42, i34]
debug_merge_point(0, '<code object uninlined_call. file 'source.py'. line 21> #19 FOR_ITER')
+415: label(p0, p1, p2, p5, i42, i34, p14, i36, i29, i28, i27, descr=TargetToken(139951847709520))
debug_merge_point(0, '<code object uninlined_call. file 'source.py'. line 21> #19 FOR_ITER')
+452: i47 = int_ge(i36, i29)
guard_false(i47, descr=<Guard41>) [p1, p0, p14, i36, i28, i27, p2, p5, i34, i42]
+461: i48 = int_mul(i36, i28)
+468: i49 = int_add(i27, i48)
+474: i50 = int_add(i36, 1)
debug_merge_point(0, '<code object uninlined_call. file 'source.py'. line 21> #22 STORE_FAST')
debug_merge_point(0, '<code object uninlined_call. file 'source.py'. line 21> #25 LOAD_FAST')
debug_merge_point(0, '<code object uninlined_call. file 'source.py'. line 21> #28 LOAD_CONST')
debug_merge_point(0, '<code object uninlined_call. file 'source.py'. line 21> #31 INPLACE_ADD')
+478: setfield_gc(p14, i50, descr=<FieldS pypy.objspace.std.iterobject.W_AbstractSeqIterObject.inst_index 8>)
+482: i51 = int_add_ovf(i42, 1)
guard_no_overflow(, descr=<Guard42>) [p1, p0, i51, p2, p5, p14, i49, None, i42]
debug_merge_point(0, '<code object uninlined_call. file 'source.py'. line 21> #32 STORE_FAST')
debug_merge_point(0, '<code object uninlined_call. file 'source.py'. line 21> #35 JUMP_ABSOLUTE')
+495: guard_not_invalidated(, descr=<Guard43>) [p1, p0, p2, p5, p14, i51, i49, None, None]
+495: i53 = getfield_raw(44057928, descr=<FieldS pypysig_long_struct.c_value 0>)
+503: i54 = int_lt(i53, 0)
guard_false(i54, descr=<Guard44>) [p1, p0, p2, p5, p14, i51, i49, None, None]
debug_merge_point(0, '<code object uninlined_call. file 'source.py'. line 21> #19 FOR_ITER')
+513: jump(p0, p1, p2, p5, i51, i49, p14, i50, i29, i28, i27, descr=TargetToken(139951847709520))
+531: --end of the loop--
[b2355889199] jit-log-opt-loop}
[b2355bbecbf] {jit-backend
[b2355c22b85] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165da6 +0  488B04254045A0024829E0483B0425E03C5101760D49BB63531614497F000041FFD3554889E5534154415541564157488DA50000000049BBB0C1FB16497F00004D8B3B4983C70149BBB0C1FB16497F00004D893B4C8B7F504C8B77784C0FB6AF960000004C8B67604C8B97800000004C8B4F584C8B4768498B5810498B5018498B40204D8B40284889BD70FFFFFF4889B568FFFFFF4C89BD60FFFFFF4C89A558FFFFFF4C898D50FFFFFF48898548FFFFFF4C898540FFFFFF49BBC8C1FB16497F00004D8B034983C00149BBC8C1FB16497F00004D89034983FA020F85000000004883FA017206813AF82200000F85000000004983FD000F850000000049BBE0BC2814497F00004D39DE0F85000000004C8B72084981FE102700000F8D0000000049BB00000000000000804D39DE0F84000000004C89F0B90200000048899538FFFFFF48898530FFFFFF489948F7F94889D048C1FA3F41BE020000004921D64C01F04883F8000F85000000004883FB017206813BF82200000F8500000000488B43084883C0010F8000000000488B9D30FFFFFF4883C3014C8B34254845A0024983FE000F8C0000000049BBE0C1FB16497F00004D8B334983C60149BBE0C1FB16497F00004D89334881FB102700000F8D0000000049BB00000000000000804C39DB0F840000000048898528FFFFFF4889D8B90200000048898520FFFFFF489948F7F94889D048C1FA3FBB020000004821D34801D84883F8000F8500000000488B8528FFFFFF4883C0010F8000000000488B9D20FFFFFF4883C301488B14254845A0024883FA000F8C00000000E958FFFFFF49BB00501614497F000041FFD32944404838354C510C085458032D00000049BB00501614497F000041FFD34440084838354C0C5458032E00000049BB00501614497F000041FFD335444048384C0C0858032F00000049BB00501614497F000041FFD3444038484C0C0858033000000049BB00501614497F000041FFD3444008484C0C033100000049BB00501614497F000041FFD344400839484C0C033200000049BB00501614497F000041FFD34440484C0C5C01033300000049BB00501614497F000041FFD344400C484C5C07033400000049BB00501614497F000041FFD344400C01484C5C07033500000049BB00501614497F000041FFD34440484C010D07033600000049BB00501614497F000041FFD34440484C010D07033700000049BB00501614497F000041FFD34440484C010D033800000049BB00501614497F000041FFD344400D484C0107033900000049BB00501614497F000041FFD34440484C016569033A00000049BB00501614497F000041FFD3444001484C076569033B00000049BB00501614497F000041FFD34440484C0D01070707033C00000049BB00501614497F000041FFD34440484C0D01070707033D000000
[b2355c31b31] jit-backend-dump}
[b2355c3224b] {jit-backend-addr
Loop 3 (<code object bridge, file 'source.py', line 27> #15 LOAD_FAST) has address 7f4914165ddc to 7f4914165ff6 (bootstrap 7f4914165da6)
[b2355c33115] jit-backend-addr}
[b2355c338c1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165dd8 +0  20FFFFFF
[b2355c3447f] jit-backend-dump}
[b2355c34b07] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165e82 +0  70010000
[b2355c3543f] jit-backend-dump}
[b2355c3589b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165e94 +0  7C010000
[b2355c36161] jit-backend-dump}
[b2355c36549] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165e9e +0  8E010000
[b2355c36edf] jit-backend-dump}
[b2355c373a9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165eb1 +0  96010000
[b2355c37db7] jit-backend-dump}
[b2355c38291] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165ec2 +0  9F010000
[b2355c38b0b] jit-backend-dump}
[b2355c38ef3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165ed5 +0  A4010000
[b2355c3976d] jit-backend-dump}
[b2355c39b67] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165f0d +0  85010000
[b2355c3a3e1] jit-backend-dump}
[b2355c3a803] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165f1f +0  8C010000
[b2355c3b393] jit-backend-dump}
[b2355c3b845] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165f2d +0  97010000
[b2355c3c245] jit-backend-dump}
[b2355c3c753] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165f4a +0  AD010000
[b2355c3cfdd] jit-backend-dump}
[b2355c3d3bd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165f75 +0  9B010000
[b2355c3dc67] jit-backend-dump}
[b2355c3e061] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165f88 +0  A0010000
[b2355c3ea79] jit-backend-dump}
[b2355c3ef51] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165fbf +0  82010000
[b2355c3f941] jit-backend-dump}
[b2355c3fd27] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165fd0 +0  8A010000
[b2355c4068b] jit-backend-dump}
[b2355c40ac9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165fed +0  A2010000
[b2355c41369] jit-backend-dump}
[b2355c41b97] jit-backend}
[b2355c43773] {jit-log-opt-loop
# Loop 3 (<code object bridge, file 'source.py', line 27> #15 LOAD_FAST) : loop with 92 ops
[p0, p1]
+84: p2 = getfield_gc(p0, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_last_exception 80>)
+88: p3 = getfield_gc(p0, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_pycode 120>)
+92: i4 = getfield_gc(p0, descr=<FieldU pypy.interpreter.pyframe.PyFrame.inst_is_being_profiled 150>)
+100: p5 = getfield_gc(p0, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_lastblock 96>)
+104: i6 = getfield_gc(p0, descr=<FieldS pypy.interpreter.pyframe.PyFrame.inst_valuestackdepth 128>)
+111: i7 = getfield_gc(p0, descr=<FieldS pypy.interpreter.pyframe.PyFrame.inst_last_instr 88>)
+115: p8 = getfield_gc(p0, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_locals_stack_w 104>)
+119: p10 = getarrayitem_gc(p8, 0, descr=<ArrayP 8>)
+123: p12 = getarrayitem_gc(p8, 1, descr=<ArrayP 8>)
+127: p14 = getarrayitem_gc(p8, 2, descr=<ArrayP 8>)
+131: p16 = getarrayitem_gc(p8, 3, descr=<ArrayP 8>)
+135: p17 = getfield_gc(p0, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_cells 40>)
+135: label(p0, p1, p2, p3, i4, p5, i6, i7, p10, p12, p14, p16, descr=TargetToken(139951847710560))
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #15 LOAD_FAST')
+214: guard_value(i6, 2, descr=<Guard45>) [i6, p1, p0, p2, p3, i4, p5, i7, p10, p12, p14, p16]
+224: guard_nonnull_class(p12, ConstClass(W_IntObject), descr=<Guard46>) [p1, p0, p12, p2, p3, i4, p5, p10, p14, p16]
+242: guard_value(i4, 0, descr=<Guard47>) [i4, p1, p0, p2, p3, p5, p10, p12, p16]
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #18 LOAD_CONST')
+252: guard_value(p3, ConstPtr(ptr21), descr=<Guard48>) [p1, p0, p3, p2, p5, p10, p12, p16]
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #21 COMPARE_OP')
+271: i22 = getfield_gc_pure(p12, descr=<FieldS pypy.objspace.std.intobject.W_IntObject.inst_intval 8>)
+275: i24 = int_lt(i22, 10000)
guard_true(i24, descr=<Guard49>) [p1, p0, p12, p2, p5, p10]
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #24 POP_JUMP_IF_FALSE')
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #27 LOAD_FAST')
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #30 LOAD_CONST')
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #33 BINARY_MODULO')
+288: i26 = int_eq(i22, -9223372036854775808)
guard_false(i26, descr=<Guard50>) [p1, p0, p12, i22, p2, p5, p10]
+307: i28 = int_mod(i22, 2)
+334: i30 = int_rshift(i28, 63)
+341: i31 = int_and(2, i30)
+350: i32 = int_add(i28, i31)
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #34 POP_JUMP_IF_FALSE')
+353: i33 = int_is_true(i32)
guard_false(i33, descr=<Guard51>) [p1, p0, p2, p5, p10, p12, i32]
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #53 LOAD_FAST')
+363: guard_nonnull_class(p10, ConstClass(W_IntObject), descr=<Guard52>) [p1, p0, p10, p2, p5, p12, None]
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #56 LOAD_CONST')
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #59 INPLACE_ADD')
+381: i36 = getfield_gc_pure(p10, descr=<FieldS pypy.objspace.std.intobject.W_IntObject.inst_intval 8>)
+385: i38 = int_add_ovf(i36, 1)
guard_no_overflow(, descr=<Guard53>) [p1, p0, p10, i38, p2, p5, p12, None]
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #60 STORE_FAST')
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #63 LOAD_FAST')
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #66 LOAD_CONST')
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #69 INPLACE_ADD')
+395: i40 = int_add(i22, 1)
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #70 STORE_FAST')
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #73 JUMP_ABSOLUTE')
+406: guard_not_invalidated(, descr=<Guard54>) [p1, p0, p2, p5, i38, i40, None]
+406: i42 = getfield_raw(44057928, descr=<FieldS pypysig_long_struct.c_value 0>)
+414: i44 = int_lt(i42, 0)
guard_false(i44, descr=<Guard55>) [p1, p0, p2, p5, i38, i40, None]
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #15 LOAD_FAST')
+424: label(p0, p1, p2, p5, i38, i40, descr=TargetToken(139951847710640))
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #15 LOAD_FAST')
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #18 LOAD_CONST')
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #21 COMPARE_OP')
+454: i45 = int_lt(i40, 10000)
guard_true(i45, descr=<Guard56>) [p1, p0, p2, p5, i38, i40]
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #24 POP_JUMP_IF_FALSE')
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #27 LOAD_FAST')
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #30 LOAD_CONST')
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #33 BINARY_MODULO')
+467: i46 = int_eq(i40, -9223372036854775808)
guard_false(i46, descr=<Guard57>) [p1, p0, i40, p2, p5, i38, None]
+486: i47 = int_mod(i40, 2)
+513: i48 = int_rshift(i47, 63)
+520: i49 = int_and(2, i48)
+528: i50 = int_add(i47, i49)
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #34 POP_JUMP_IF_FALSE')
+531: i51 = int_is_true(i50)
guard_false(i51, descr=<Guard58>) [p1, p0, p2, p5, i50, i38, i40]
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #53 LOAD_FAST')
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #56 LOAD_CONST')
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #59 INPLACE_ADD')
+541: i52 = int_add_ovf(i38, 1)
guard_no_overflow(, descr=<Guard59>) [p1, p0, i52, p2, p5, None, i38, i40]
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #60 STORE_FAST')
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #63 LOAD_FAST')
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #66 LOAD_CONST')
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #69 INPLACE_ADD')
+558: i53 = int_add(i40, 1)
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #70 STORE_FAST')
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #73 JUMP_ABSOLUTE')
+569: guard_not_invalidated(, descr=<Guard60>) [p1, p0, p2, p5, i53, i52, None, None, None]
+569: i54 = getfield_raw(44057928, descr=<FieldS pypysig_long_struct.c_value 0>)
+577: i55 = int_lt(i54, 0)
guard_false(i55, descr=<Guard61>) [p1, p0, p2, p5, i53, i52, None, None, None]
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #15 LOAD_FAST')
+587: jump(p0, p1, p2, p5, i52, i53, descr=TargetToken(139951847710640))
+592: --end of the loop--
[b2355c89905] jit-log-opt-loop}
[b2355d4588f] {jit-backend
[b2355d837a3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141661bb
[b2355d89d2b] jit-backend-dump}
[b2355d8a315] {jit-backend-addr
bridge out of Guard 41 has address 7f49141661bb to 7f49141663b4
[b2355d8af37] jit-backend-addr}
[b2355d8b501] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141661be +0  A0FEFFFF
[b2355d8bfaf] jit-backend-dump}
[b2355d8c6cd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141661fe +0  B2010000
[b2355d8d16f] jit-backend-dump}
[b2355d8d599] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f491416620d +0  BC010000
[b2355d8dfb7] jit-backend-dump}
[b2355d8e45f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914166216 +0  CC010000
[b2355d8ed83] jit-backend-dump}
[b2355d8f3ab] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165b95 +0  22060000
[b2355d8fc45] jit-backend-dump}
[b2355d9035b] jit-backend}
[b2355d90e8b] {jit-log-opt-bridge
# bridge out of Guard 41 with 28 ops
[p0, p1, p2, i3, i4, i5, p6, p7, i8, i9]
debug_merge_point(0, '<code object uninlined_call. file 'source.py'. line 21> #38 POP_BLOCK')
+37: p10 = getfield_gc_pure(p7, descr=<FieldP pypy.interpreter.pyopcode.FrameBlock.inst_previous 16>)
+49: setfield_gc(p2, ConstPtr(ptr11), descr=<FieldP pypy.objspace.std.iterobject.W_AbstractSeqIterObject.inst_w_seq 16>)
+57: guard_class(p7, 38639224, descr=<Guard62>) [p0, p1, p7, p6, p10, i9, i8]
+71: i13 = getfield_gc_pure(p7, descr=<FieldS pypy.interpreter.pyopcode.FrameBlock.inst_valuestackdepth 24>)
+76: guard_value(i13, 2, descr=<Guard63>) [p0, p1, i13, p6, p10, i9, i8]
debug_merge_point(0, '<code object uninlined_call. file 'source.py'. line 21> #39 LOAD_FAST')
debug_merge_point(0, '<code object uninlined_call. file 'source.py'. line 21> #42 RETURN_VALUE')
+86: guard_isnull(p10, descr=<Guard64>) [p0, p1, p10, p6, i9, i8]
+95: p15 = getfield_gc(p1, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_locals_stack_w 104>)
+106: p16 = getfield_gc(p1, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_cells 40>)
p18 = new_with_vtable(ConstClass(W_IntObject))
+169: setfield_gc(p1, 1, descr=<FieldU pypy.interpreter.pyframe.PyFrame.inst_frame_finished_execution 149>)
setfield_gc(p1, p6, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_last_exception 80>)
setfield_gc(p1, ConstPtr(ptr20), descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_pycode 120>)
+273: setfield_gc(p1, 0, descr=<FieldU pypy.interpreter.pyframe.PyFrame.inst_is_being_profiled 150>)
+281: setfield_gc(p1, ConstPtr(ptr22), descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_lastblock 96>)
+289: setfield_gc(p1, 2, descr=<FieldS pypy.interpreter.pyframe.PyFrame.inst_valuestackdepth 128>)
+300: setfield_gc(p1, 42, descr=<FieldS pypy.interpreter.pyframe.PyFrame.inst_last_instr 88>)
setarrayitem_gc(p15, 0, p18, descr=<ArrayP 8>)
p27 = new_with_vtable(ConstClass(W_IntObject))
+373: setfield_gc(p27, i8, descr=<FieldS pypy.objspace.std.intobject.W_IntObject.inst_intval 8>)
setarrayitem_gc(p15, 1, p27, descr=<ArrayP 8>)
+437: setarrayitem_gc(p15, 2, ConstPtr(ptr30), descr=<ArrayP 8>)
+446: setarrayitem_gc(p15, 3, ConstPtr(ptr32), descr=<ArrayP 8>)
+455: setarrayitem_gc(p15, 4, ConstPtr(ptr32), descr=<ArrayP 8>)
+464: setfield_gc(p18, i9, descr=<FieldS pypy.objspace.std.intobject.W_IntObject.inst_intval 8>)
+468: finish(p18, descr=<DoneWithThisFrameDescrRef object at 0x1888920>)
+505: --end of the loop--
[b2355db3bdd] jit-log-opt-bridge}
[b2356568dd9] {jit-backend
[b2356807229] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f491416644d
[b235681f90f] jit-backend-dump}
[b23568201af] {jit-backend-addr
bridge out of Guard 58 has address 7f491416644d to 7f4914166874
[b2356821005] jit-backend-addr}
[b2356821755] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914166450 +0  70FEFFFF
[b23568223f1] jit-backend-dump}
[b2356822c65] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f491416648c +0  E4030000
[b235682369f] jit-backend-dump}
[b2356823b9b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141664a3 +0  E6030000
[b235682470d] jit-backend-dump}
[b2356824dab] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141664bd +0  FF030000
[b2356825801] jit-backend-dump}
[b2356825d0d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141664cb +0  0D040000
[b23568265f9] jit-backend-dump}
[b2356826a35] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141664e0 +0  2E040000
[b23568272f1] jit-backend-dump}
[b23568276e9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141664f2 +0  38040000
[b2356827fbf] jit-backend-dump}
[b23568284eb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141666f7 +0  4E020000
[b2356828fb5] jit-backend-dump}
[b23568294b7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914166706 +0  5B020000
[b2356829f1d] jit-backend-dump}
[b235682a31d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f491416671a +0  63020000
[b235682abd3] jit-backend-dump}
[b235682afd1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914166737 +0  63020000
[b235682b891] jit-backend-dump}
[b235682bc7b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914166775 +0  41020000
[b235682c6bb] jit-backend-dump}
[b235682cbc9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914166790 +0  43020000
[b235682d631] jit-backend-dump}
[b235682da4b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141667a4 +0  48020000
[b235682e301] jit-backend-dump}
[b235682e6eb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141667b5 +0  51020000
[b235682efbf] jit-backend-dump}
[b235682f7c5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141667c7 +0  73020000
[b2356830083] jit-backend-dump}
[b23568304ad] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141667f2 +0  62020000
[b2356830ee9] jit-backend-dump}
[b23568313b7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914166805 +0  67020000
[b23568343ff] jit-backend-dump}
[b235683496d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914166833 +0  52020000
[b23568353f9] jit-backend-dump}
[b235683589d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914166840 +0  5E020000
[b2356836179] jit-backend-dump}
[b23568365f5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f491416685d +0  76020000
[b2356836ff7] jit-backend-dump}
[b235683759d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165fbf +0  8A040000
[b235683802b] jit-backend-dump}
[b235683892d] jit-backend}
[b235683997d] {jit-log-opt-bridge
# bridge out of Guard 58 with 138 ops
[p0, p1, p2, p3, i4, i5, i6]
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #37 LOAD_FAST')
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #40 LOAD_GLOBAL')
+37: p7 = getfield_gc(p1, descr=<FieldP pypy.interpreter.eval.Frame.inst_w_globals 8>)
+48: guard_value(p7, ConstPtr(ptr8), descr=<Guard66>) [p0, p1, p7, p2, p3, i6, i5]
+67: p9 = getfield_gc(p7, descr=<FieldP pypy.objspace.std.dictmultiobject.W_DictMultiObject.inst_strategy 16>)
+71: guard_value(p9, ConstPtr(ptr10), descr=<Guard67>) [p0, p1, p9, p7, p2, p3, i6, i5]
+90: guard_not_invalidated(, descr=<Guard68>) [p0, p1, p7, p2, p3, i6, i5]
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #43 CALL_FUNCTION')
+90: p12 = call(ConstClass(getexecutioncontext), descr=<Callr 8 EF=1>)
+99: p13 = getfield_gc(p12, descr=<FieldP pypy.interpreter.executioncontext.ExecutionContext.inst_topframeref 64>)
+103: i14 = force_token()
+103: p15 = getfield_gc(p12, descr=<FieldP pypy.interpreter.executioncontext.ExecutionContext.inst_w_tracefunc 80>)
+107: guard_isnull(p15, descr=<Guard69>) [p0, p1, p12, p15, p2, p3, i14, p13, i6, i5]
+116: i16 = getfield_gc(p12, descr=<FieldU pypy.interpreter.executioncontext.ExecutionContext.inst_profilefunc 40>)
+120: i17 = int_is_zero(i16)
guard_true(i17, descr=<Guard70>) [p0, p1, p12, p2, p3, i14, p13, i6, i5]
debug_merge_point(1, '<code object uninlined_call. file 'source.py'. line 21> #0 LOAD_CONST')
debug_merge_point(1, '<code object uninlined_call. file 'source.py'. line 21> #3 STORE_FAST')
debug_merge_point(1, '<code object uninlined_call. file 'source.py'. line 21> #6 SETUP_LOOP')
debug_merge_point(1, '<code object uninlined_call. file 'source.py'. line 21> #9 LOAD_GLOBAL')
+130: guard_not_invalidated(, descr=<Guard71>) [p0, p1, p12, p2, p3, i14, p13, i6, i5]
+130: p19 = getfield_gc(ConstPtr(ptr18), descr=<FieldP pypy.objspace.std.dictmultiobject.W_DictMultiObject.inst_strategy 16>)
+138: guard_value(p19, ConstPtr(ptr20), descr=<Guard72>) [p0, p1, p12, p19, p2, p3, i14, p13, i6, i5]
debug_merge_point(1, '<code object uninlined_call. file 'source.py'. line 21> #12 LOAD_CONST')
debug_merge_point(1, '<code object uninlined_call. file 'source.py'. line 21> #15 CALL_FUNCTION')
debug_merge_point(1, '<code object uninlined_call. file 'source.py'. line 21> #18 GET_ITER')
debug_merge_point(1, '<code object uninlined_call. file 'source.py'. line 21> #19 FOR_ITER')
debug_merge_point(1, '<code object uninlined_call. file 'source.py'. line 21> #22 STORE_FAST')
debug_merge_point(1, '<code object uninlined_call. file 'source.py'. line 21> #25 LOAD_FAST')
debug_merge_point(1, '<code object uninlined_call. file 'source.py'. line 21> #28 LOAD_CONST')
debug_merge_point(1, '<code object uninlined_call. file 'source.py'. line 21> #31 INPLACE_ADD')
debug_merge_point(1, '<code object uninlined_call. file 'source.py'. line 21> #32 STORE_FAST')
debug_merge_point(1, '<code object uninlined_call. file 'source.py'. line 21> #35 JUMP_ABSOLUTE')
+151: i22 = getfield_raw(44057928, descr=<FieldS pypysig_long_struct.c_value 0>)
+159: i24 = int_lt(i22, 0)
guard_false(i24, descr=<Guard73>) [p0, p1, p12, p2, p3, i14, p13, i6, i5]
debug_merge_point(1, '<code object uninlined_call. file 'source.py'. line 21> #19 FOR_ITER')
+169: i25 = force_token()
p27 = new_with_vtable(38637192)
p29 = new_array(5, descr=<ArrayP 8>)
p31 = new_with_vtable(ConstClass(W_IntObject))
p33 = new_with_vtable(ConstClass(W_IntObject))
p35 = new_with_vtable(38562496)
p37 = new_with_vtable(ConstClass(W_ListObject))
p39 = new_array(0, descr=<ArrayP 8>)
p41 = new_with_vtable(38637968)
+359: setfield_gc(p41, i14, descr=<FieldS JitVirtualRef.virtual_token 8>)
setfield_gc(p12, p41, descr=<FieldP pypy.interpreter.executioncontext.ExecutionContext.inst_topframeref 64>)
+410: setfield_gc(p1, i25, descr=<FieldS pypy.interpreter.pyframe.PyFrame.vable_token 24>)
+421: setfield_gc(p27, p13, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_f_backref 48>)
+425: setfield_gc(p31, 1, descr=<FieldS pypy.objspace.std.intobject.W_IntObject.inst_intval 8>)
+433: setarrayitem_gc(p29, 0, p31, descr=<ArrayP 8>)
+437: setarrayitem_gc(p29, 1, p33, descr=<ArrayP 8>)
+441: setfield_gc(p37, ConstPtr(ptr45), descr=<FieldP pypy.objspace.std.listobject.W_ListObject.inst_strategy 16>)
+449: setfield_gc(p37, ConstPtr(ptr46), descr=<FieldP pypy.objspace.std.listobject.W_ListObject.inst_lstorage 8>)
+463: setfield_gc(p35, p37, descr=<FieldP pypy.objspace.std.iterobject.W_AbstractSeqIterObject.inst_w_seq 16>)
+467: setfield_gc(p35, 1, descr=<FieldS pypy.objspace.std.iterobject.W_AbstractSeqIterObject.inst_index 8>)
+475: setarrayitem_gc(p29, 2, p35, descr=<ArrayP 8>)
+479: setfield_gc(p27, p29, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_locals_stack_w 104>)
+483: setfield_gc(p27, 2, descr=<FieldS pypy.interpreter.pyframe.PyFrame.inst_nlocals 112>)
+491: setfield_gc(p27, ConstPtr(ptr8), descr=<FieldP pypy.interpreter.eval.Frame.inst_w_globals 8>)
+505: setfield_gc(p27, 19, descr=<FieldS pypy.interpreter.pyframe.PyFrame.inst_last_instr 88>)
+513: setfield_gc(p27, 3, descr=<FieldS pypy.interpreter.pyframe.PyFrame.inst_valuestackdepth 128>)
+524: setfield_gc(p27, 21, descr=<FieldS pypy.interpreter.pyframe.PyFrame.inst_f_lineno 144>)
+534: setfield_gc(p27, ConstPtr(ptr53), descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_pycode 120>)
+548: setfield_gc(p27, ConstPtr(ptr54), descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_lastblock 96>)
+562: setfield_gc(p27, p39, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_cells 40>)
+566: p55 = call_assembler(p27, p12, descr=<Loop2>)
guard_not_forced(, descr=<Guard65>) [p0, p1, p12, p27, p55, p41, p2, p3, i6, i5]
+686: keepalive(p27)
+686: guard_no_exception(, descr=<Guard74>) [p0, p1, p12, p27, p55, p41, p2, p3, i6, i5]
+701: p56 = getfield_gc(p12, descr=<FieldP pypy.interpreter.executioncontext.ExecutionContext.inst_w_tracefunc 80>)
+712: guard_isnull(p56, descr=<Guard75>) [p0, p1, p12, p55, p27, p56, p41, p2, p3, i6, i5]
+721: i57 = getfield_gc(p12, descr=<FieldU pypy.interpreter.executioncontext.ExecutionContext.inst_profilefunc 40>)
+725: setfield_gc(p27, ConstPtr(ptr58), descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_last_exception 80>)
+740: i59 = int_is_true(i57)
guard_false(i59, descr=<Guard76>) [p0, p1, p55, p27, p12, p41, p2, p3, i6, i5]
+750: p60 = getfield_gc(p12, descr=<FieldP pypy.interpreter.executioncontext.ExecutionContext.inst_topframeref 64>)
+754: p61 = getfield_gc(p27, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_f_backref 48>)
+758: i62 = getfield_gc(p27, descr=<FieldU pypy.interpreter.pyframe.PyFrame.inst_escaped 148>)
setfield_gc(p12, p61, descr=<FieldP pypy.interpreter.executioncontext.ExecutionContext.inst_topframeref 64>)
+803: guard_false(i62, descr=<Guard77>) [p0, p1, p55, p60, p27, p12, p41, p2, p3, i6, i5]
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #46 INPLACE_ADD')
+812: setfield_gc(p41, -3, descr=<FieldS JitVirtualRef.virtual_token 8>)
+827: guard_class(p55, ConstClass(W_IntObject), descr=<Guard78>) [p0, p1, p55, p2, p3, i6, i5]
+839: i65 = getfield_gc_pure(p55, descr=<FieldS pypy.objspace.std.intobject.W_IntObject.inst_intval 8>)
+843: i66 = int_add_ovf(i5, i65)
guard_no_overflow(, descr=<Guard79>) [p0, p1, p55, i66, p2, p3, i6, i5]
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #47 STORE_FAST')
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #50 JUMP_FORWARD')
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #63 LOAD_FAST')
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #66 LOAD_CONST')
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #69 INPLACE_ADD')
+859: i68 = int_add_ovf(i6, 1)
guard_no_overflow(, descr=<Guard80>) [p0, p1, i68, p2, p3, i66, i6, None]
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #70 STORE_FAST')
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #73 JUMP_ABSOLUTE')
+876: guard_not_invalidated(, descr=<Guard81>) [p0, p1, p2, p3, i68, i66, None, None]
+876: i71 = getfield_raw(44057928, descr=<FieldS pypysig_long_struct.c_value 0>)
+884: i73 = int_lt(i71, 0)
guard_false(i73, descr=<Guard82>) [p0, p1, p2, p3, i68, i66, None, None]
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #15 LOAD_FAST')
+894: label(p1, p0, p2, p3, i66, i68, descr=TargetToken(139951894596208))
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #18 LOAD_CONST')
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #21 COMPARE_OP')
+924: i75 = int_lt(i68, 10000)
guard_true(i75, descr=<Guard83>) [p0, p1, p2, p3, i68, i66]
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #24 POP_JUMP_IF_FALSE')
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #27 LOAD_FAST')
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #30 LOAD_CONST')
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #33 BINARY_MODULO')
+937: i77 = int_eq(i68, -9223372036854775808)
guard_false(i77, descr=<Guard84>) [p0, p1, i68, p2, p3, None, i66]
+956: i79 = int_mod(i68, 2)
+973: i81 = int_rshift(i79, 63)
+980: i82 = int_and(2, i81)
+989: i83 = int_add(i79, i82)
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #34 POP_JUMP_IF_FALSE')
+992: i84 = int_is_true(i83)
guard_false(i84, descr=<Guard85>) [p0, p1, p2, p3, i83, i68, i66]
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #53 LOAD_FAST')
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #56 LOAD_CONST')
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #59 INPLACE_ADD')
+1002: i86 = int_add_ovf(i66, 1)
guard_no_overflow(, descr=<Guard86>) [p0, p1, i86, p2, p3, None, i68, i66]
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #60 STORE_FAST')
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #63 LOAD_FAST')
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #66 LOAD_CONST')
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #69 INPLACE_ADD')
+1015: i88 = int_add(i68, 1)
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #70 STORE_FAST')
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #73 JUMP_ABSOLUTE')
+1026: guard_not_invalidated(, descr=<Guard87>) [p0, p1, p2, p3, i86, i88, None, None, None]
+1026: i90 = getfield_raw(44057928, descr=<FieldS pypysig_long_struct.c_value 0>)
+1034: i92 = int_lt(i90, 0)
guard_false(i92, descr=<Guard88>) [p0, p1, p2, p3, i86, i88, None, None, None]
debug_merge_point(0, '<code object bridge. file 'source.py'. line 27> #15 LOAD_FAST')
+1044: jump(p1, p0, p2, p3, i86, i88, descr=TargetToken(139951847710640))
+1063: --end of the loop--
[b23568a15d7] jit-log-opt-bridge}
[b2356998697] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165f3c +0  E9A1010000
[b235699a901] jit-backend-dump}
[b235699ae9b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914165fdf +0  E994010000
[b235699bb83] jit-backend-dump}
[b235699c09f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141664a7 +0  E9FB030000
[b235699cac5] jit-backend-dump}
[b235699ceb3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141664cf +0  E923040000
[b235699d7cd] jit-backend-dump}
[b235699dc07] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141667b9 +0  E966020000
[b23569a56f1] jit-backend-dump}
[b23569a5cb9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f491416684f +0  E968020000
[b23569a66d5] jit-backend-dump}
[b2356d6a1b4] {jit-backend
[b2356e2c6af] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914166b
[b2356e39eb9] jit-backend-dump}
[b2356e3a639] {jit-backend-addr
Loop 4 (<code object inlined_str_stuff, file 'source.py', line 40> #13 FOR_ITER) has address 7f4914166b96 to 7f4914166f7a (bootstrap 7f4914166b60)
[b2356e3b5e7] jit-backend-addr}
[b2356e3bf81] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914166b92 +0  B0FEFFFF
[b2356e45271] jit-backend-dump}
[b2356e45eed] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914166c68 +0  0E030000
[b2356e46a71] jit-backend-dump}
[b2356e471f7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914166c75 +0  23030000
[b2356e47b97] jit-backend-dump}
[b2356e47f99] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914166c82 +0  36030000
[b2356e4885b] jit-backend-dump}
[b2356e48c61] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914166c96 +0  43030000
[b2356e49505] jit-backend-dump}
[b2356e498e9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914166cb0 +0  4C030000
[b2356e4a391] jit-backend-dump}
[b2356e4a879] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914166cb9 +0  67030000
[b2356e4b295] jit-backend-dump}
[b2356e4b6a5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914166cd8 +0  6B030000
[b2356e4bf31] jit-backend-dump}
[b2356e4c315] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914166ceb +0  78030000
[b2356e4cbb9] jit-backend-dump}
[b2356e4cfaf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914166d02 +0  7F030000
[b2356e4d827] jit-backend-dump}
[b2356e4dd37] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914166d19 +0  86030000
[b2356e4e7d9] jit-backend-dump}
[b2356e4ee51] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914166d2e +0  AE030000
[b2356e4f7ed] jit-backend-dump}
[b2356e4fbcd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914166d6c +0  8E030000
[b2356e50461] jit-backend-dump}
[b2356e50831] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914166d83 +0  94030000
[b2356e510c9] jit-backend-dump}
[b2356e514c1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914166dc5 +0  70030000
[b2356e51de9] jit-backend-dump}
[b2356e522e5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914166e2d +0  2B030000
[b2356e52cef] jit-backend-dump}
[b2356e531b7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914166e5f +0  16030000
[b2356e53a4b] jit-backend-dump}
[b2356e53e9b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914166eac +0  05030000
[b2356e54735] jit-backend-dump}
[b2356e54b39] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914166eea +0  E5020000
[b2356e553c9] jit-backend-dump}
[b2356e558d7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914166f52 +0  A0020000
[b2356e5635d] jit-backend-dump}
[b2356e57001] jit-backend}
[b2356e5939d] {jit-log-opt-loop
# Loop 4 (<code object inlined_str_stuff, file 'source.py', line 40> #13 FOR_ITER) : loop with 100 ops
[p0, p1]
+84: p2 = getfield_gc(p0, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_last_exception 80>)
+88: p3 = getfield_gc(p0, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_pycode 120>)
+92: i4 = getfield_gc(p0, descr=<FieldU pypy.interpreter.pyframe.PyFrame.inst_is_being_profiled 150>)
+100: p5 = getfield_gc(p0, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_lastblock 96>)
+104: i6 = getfield_gc(p0, descr=<FieldS pypy.interpreter.pyframe.PyFrame.inst_valuestackdepth 128>)
+111: i7 = getfield_gc(p0, descr=<FieldS pypy.interpreter.pyframe.PyFrame.inst_last_instr 88>)
+115: p8 = getfield_gc(p0, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_locals_stack_w 104>)
+119: p10 = getarrayitem_gc(p8, 0, descr=<ArrayP 8>)
+123: p12 = getarrayitem_gc(p8, 1, descr=<ArrayP 8>)
+127: p14 = getarrayitem_gc(p8, 2, descr=<ArrayP 8>)
+131: p16 = getarrayitem_gc(p8, 3, descr=<ArrayP 8>)
+135: p18 = getarrayitem_gc(p8, 4, descr=<ArrayP 8>)
+146: p20 = getarrayitem_gc(p8, 5, descr=<ArrayP 8>)
+157: p22 = getarrayitem_gc(p8, 6, descr=<ArrayP 8>)
+168: p24 = getarrayitem_gc(p8, 7, descr=<ArrayP 8>)
+172: p25 = getfield_gc(p0, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_cells 40>)
+172: label(p0, p1, p2, p3, i4, p5, i6, i7, p10, p12, p14, p16, p18, p20, p22, p24, descr=TargetToken(139951894599248))
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #13 FOR_ITER')
+258: guard_value(i6, 5, descr=<Guard89>) [i6, p1, p0, p2, p3, i4, p5, i7, p10, p12, p14, p16, p18, p20, p22, p24]
+268: guard_class(p18, 38562496, descr=<Guard90>) [p1, p0, p18, p2, p3, i4, p5, p10, p12, p14, p16, p20, p22, p24]
+281: p28 = getfield_gc(p18, descr=<FieldP pypy.objspace.std.iterobject.W_AbstractSeqIterObject.inst_w_seq 16>)
+285: guard_nonnull(p28, descr=<Guard91>) [p1, p0, p18, p28, p2, p3, i4, p5, p10, p12, p14, p16, p20, p22, p24]
+294: i29 = getfield_gc(p18, descr=<FieldS pypy.objspace.std.iterobject.W_AbstractSeqIterObject.inst_index 8>)
+298: p30 = getfield_gc(p28, descr=<FieldP pypy.objspace.std.listobject.W_ListObject.inst_strategy 16>)
+302: guard_class(p30, 38745240, descr=<Guard92>) [p1, p0, p18, i29, p30, p28, p2, p3, i4, p5, p10, p12, p14, p16, p20, p22, p24]
+314: p32 = getfield_gc(p28, descr=<FieldP pypy.objspace.std.listobject.W_ListObject.inst_lstorage 8>)
+318: i33 = getfield_gc_pure(p32, descr=<FieldS tuple3.item0 8>)
+322: i34 = getfield_gc_pure(p32, descr=<FieldS tuple3.item1 16>)
+326: i35 = getfield_gc_pure(p32, descr=<FieldS tuple3.item2 24>)
+330: i37 = int_lt(i29, 0)
guard_false(i37, descr=<Guard93>) [p1, p0, p18, i29, i35, i34, i33, p2, p3, i4, p5, p10, p12, p14, p16, p20, p22, p24]
+340: i38 = int_ge(i29, i35)
guard_false(i38, descr=<Guard94>) [p1, p0, p18, i29, i34, i33, p2, p3, i4, p5, p10, p12, p14, p16, p20, p22, p24]
+349: i39 = int_mul(i29, i34)
+356: i40 = int_add(i33, i39)
+362: i42 = int_add(i29, 1)
+366: setfield_gc(p18, i42, descr=<FieldS pypy.objspace.std.iterobject.W_AbstractSeqIterObject.inst_index 8>)
+370: guard_value(i4, 0, descr=<Guard95>) [i4, p1, p0, p2, p3, p5, p10, p12, p14, p16, p18, p22, p24, i40]
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #16 STORE_FAST')
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #19 LOAD_GLOBAL')
+380: guard_value(p3, ConstPtr(ptr44), descr=<Guard96>) [p1, p0, p3, p2, p5, p12, p14, p16, p18, p22, p24, i40]
+399: p45 = getfield_gc(p0, descr=<FieldP pypy.interpreter.eval.Frame.inst_w_globals 8>)
+403: guard_value(p45, ConstPtr(ptr46), descr=<Guard97>) [p1, p0, p45, p2, p5, p12, p14, p16, p18, p22, p24, i40]
+422: p47 = getfield_gc(p45, descr=<FieldP pypy.objspace.std.dictmultiobject.W_DictMultiObject.inst_strategy 16>)
+426: guard_value(p47, ConstPtr(ptr48), descr=<Guard98>) [p1, p0, p47, p45, p2, p5, p12, p14, p16, p18, p22, p24, i40]
+445: guard_not_invalidated(, descr=<Guard99>) [p1, p0, p45, p2, p5, p12, p14, p16, p18, p22, p24, i40]
+445: p50 = getfield_gc(ConstPtr(ptr49), descr=<FieldP pypy.objspace.std.dictmultiobject.W_DictMultiObject.inst_strategy 16>)
+453: guard_value(p50, ConstPtr(ptr51), descr=<Guard100>) [p1, p0, p50, p2, p5, p12, p14, p16, p18, p22, p24, i40]
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #22 LOAD_FAST')
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #25 CALL_FUNCTION')
+466: p53 = call(ConstClass(ll_int_str__IntegerR_SignedConst_Signed), i40, descr=<Callr 8 i EF=3>)
+513: guard_no_exception(, descr=<Guard101>) [p1, p0, p53, p2, p5, p12, p14, p16, p18, p24, i40]
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #28 LIST_APPEND')
+528: p54 = getfield_gc(p16, descr=<FieldP pypy.objspace.std.listobject.W_ListObject.inst_strategy 16>)
+539: guard_class(p54, 38655536, descr=<Guard102>) [p1, p0, p54, p16, p2, p5, p12, p14, p18, p24, p53, i40]
+551: p56 = getfield_gc(p16, descr=<FieldP pypy.objspace.std.listobject.W_ListObject.inst_lstorage 8>)
+555: i57 = getfield_gc(p56, descr=<FieldS list.length 8>)
+559: i59 = int_add(i57, 1)
+566: p60 = getfield_gc(p56, descr=<FieldP list.items 16>)
+566: i61 = arraylen_gc(p60, descr=<ArrayP 8>)
+566: call(ConstClass(_ll_list_resize_ge_trampoline__v575___simple_call__function__), p56, i59, descr=<Callv 0 ri EF=4>)
+602: guard_no_exception(, descr=<Guard103>) [p1, p0, i57, p53, p56, p2, p5, p12, p14, p16, p18, p24, None, i40]
+617: p64 = getfield_gc(p56, descr=<FieldP list.items 16>)
setarrayitem_gc(p64, i57, p53, descr=<ArrayP 8>)
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #31 JUMP_ABSOLUTE')
+703: i66 = getfield_raw(44057928, descr=<FieldS pypysig_long_struct.c_value 0>)
+711: i68 = int_lt(i66, 0)
guard_false(i68, descr=<Guard104>) [p1, p0, p2, p5, p12, p14, p16, p18, p24, None, i40]
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #13 FOR_ITER')
+721: p69 = same_as(ConstPtr(ptr48))
+721: label(p0, p1, p2, p5, i40, p12, p14, p16, p18, p24, i42, i35, i34, i33, p56, descr=TargetToken(139951894599328))
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #13 FOR_ITER')
+751: i70 = int_ge(i42, i35)
guard_false(i70, descr=<Guard105>) [p1, p0, p18, i42, i34, i33, p2, p5, p12, p14, p16, p24, i40]
+771: i71 = int_mul(i42, i34)
+779: i72 = int_add(i33, i71)
+785: i73 = int_add(i42, 1)
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #16 STORE_FAST')
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #19 LOAD_GLOBAL')
+796: setfield_gc(p18, i73, descr=<FieldS pypy.objspace.std.iterobject.W_AbstractSeqIterObject.inst_index 8>)
+800: guard_not_invalidated(, descr=<Guard106>) [p1, p0, p2, p5, p12, p14, p16, p18, p24, i72, None]
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #22 LOAD_FAST')
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #25 CALL_FUNCTION')
+800: p74 = call(ConstClass(ll_int_str__IntegerR_SignedConst_Signed), i72, descr=<Callr 8 i EF=3>)
+833: guard_no_exception(, descr=<Guard107>) [p1, p0, p74, p2, p5, p12, p14, p16, p18, p24, i72, None]
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #28 LIST_APPEND')
+848: i75 = getfield_gc(p56, descr=<FieldS list.length 8>)
+859: i76 = int_add(i75, 1)
+866: p77 = getfield_gc(p56, descr=<FieldP list.items 16>)
+866: i78 = arraylen_gc(p77, descr=<ArrayP 8>)
+866: call(ConstClass(_ll_list_resize_ge_trampoline__v575___simple_call__function__), p56, i76, descr=<Callv 0 ri EF=4>)
+895: guard_no_exception(, descr=<Guard108>) [p1, p0, i75, p74, p56, p2, p5, p12, p14, p16, p18, p24, i72, None]
+910: p79 = getfield_gc(p56, descr=<FieldP list.items 16>)
setarrayitem_gc(p79, i75, p74, descr=<ArrayP 8>)
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #31 JUMP_ABSOLUTE')
+996: i80 = getfield_raw(44057928, descr=<FieldS pypysig_long_struct.c_value 0>)
+1004: i81 = int_lt(i80, 0)
guard_false(i81, descr=<Guard109>) [p1, p0, p2, p5, p12, p14, p16, p18, p24, i72, None]
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #13 FOR_ITER')
+1014: jump(p0, p1, p2, p5, i72, p12, p14, p16, p18, p24, i73, i35, i34, i33, p56, descr=TargetToken(139951894599328))
+1050: --end of the loop--
[b2356ec920e] jit-log-opt-loop}
[b235731c717] {jit-backend
[b2357338c53] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167213 +0  488B04254045A0024829E0483B0425E03C5101760D49BB63531614497F000041FFD3554889E5534154415541564157488DA50000000049BB88C2FB16497F00004D8B3B4983C70149BB88C2FB16497F00004D893B4C8B7E404D0FB67C3F184983FF330F85000000004989FF4883C70148897E1848C74620000000004C897E28B80100000048890425D0D1550141BBD01BF30041FFD3B802000000488D65D8415F415E415D415C5B5DC349BB00501614497F000041FFD31D18036E000000
[b235733cd55] jit-backend-dump}
[b235733d271] {jit-backend-addr
Loop 5 (re StrLiteralSearch at 11/51 [17, 8, 3, 1, 1, 1, 1, 51, 0, 19, 51, 1]) has address 7f4914167249 to 7f49141672bc (bootstrap 7f4914167213)
[b235733de81] jit-backend-addr}
[b235733e473] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167245 +0  70FFFFFF
[b235733ef61] jit-backend-dump}
[b235733f6d1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167277 +0  41000000
[b235733ffb7] jit-backend-dump}
[b23573406b3] jit-backend}
[b2357342487] {jit-log-opt-loop
# Loop 5 (re StrLiteralSearch at 11/51 [17, 8, 3, 1, 1, 1, 1, 51, 0, 19, 51, 1]) : entry bridge with 10 ops
[i0, p1]
debug_merge_point(0, 're StrLiteralSearch at 11/51 [17. 8. 3. 1. 1. 1. 1. 51. 0. 19. 51. 1]')
+84: p2 = getfield_gc(p1, descr=<FieldP pypy.rlib.rsre.rsre_core.StrMatchContext.inst__string 64>)
+88: i3 = strgetitem(p2, i0)
+94: i5 = int_eq(i3, 51)
guard_true(i5, descr=<Guard110>) [i0, p1]
+104: i7 = int_add(i0, 1)
+111: setfield_gc(p1, i7, descr=<FieldS pypy.rlib.rsre.rsre_core.AbstractMatchContext.inst_match_end 24>)
+115: setfield_gc(p1, ConstPtr(ptr8), descr=<FieldP pypy.rlib.rsre.rsre_core.AbstractMatchContext.inst_match_marks 32>)
+123: setfield_gc(p1, i0, descr=<FieldS pypy.rlib.rsre.rsre_core.AbstractMatchContext.inst_match_start 40>)
+127: finish(1, descr=<DoneWithThisFrameDescrInt object at 0x1888940>)
+169: --end of the loop--
[b2357354d2b] jit-log-opt-loop}
[b23577c8a9f] {jit-backend
[b23577deaef] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141672d0 +0  488DA50000000049BBA0C2FB16497F00004D8B3B4983C70149BBA0C2FB16497F00004D893B4883C7014C8B7E084C39FF0F8D000000004C8B76404D0FB6743E184983FE330F84000000004883C7014C39FF0F8C00000000B80000000048890425D0D1550141BBD01BF30041FFD3B802000000488D65D8415F415E415D415C5B5DC349BB00501614497F000041FFD31D18036F00000049BB00501614497F000041FFD31D18037000000049BB00501614497F000041FFD31D180371000000
[b23577e2449] jit-backend-dump}
[b23577e2951] {jit-backend-addr
bridge out of Guard 110 has address 7f49141672d0 to 7f4914167351
[b23577e34f3] jit-backend-addr}
[b23577e3a33] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141672d3 +0  70FFFFFF
[b23577e44c1] jit-backend-dump}
[b23577e4b31] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167302 +0  4B000000
[b23577e54d9] jit-backend-dump}
[b23577e58e7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167316 +0  4B000000
[b23577e620b] jit-backend-dump}
[b23577e65f9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167323 +0  52000000
[b23577e6ee5] jit-backend-dump}
[b23577e74ab] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167277 +0  55000000
[b23577e7dd7] jit-backend-dump}
[b23577e8497] jit-backend}
[b23577e8eb1] {jit-log-opt-bridge
# bridge out of Guard 110 with 13 ops
[i0, p1]
+37: i3 = int_add(i0, 1)
+41: i4 = getfield_gc_pure(p1, descr=<FieldS pypy.rlib.rsre.rsre_core.AbstractMatchContext.inst_end 8>)
+45: i5 = int_lt(i3, i4)
guard_true(i5, descr=<Guard111>) [i3, p1]
debug_merge_point(0, 're StrLiteralSearch at 11/51 [17. 8. 3. 1. 1. 1. 1. 51. 0. 19. 51. 1]')
+54: p6 = getfield_gc(p1, descr=<FieldP pypy.rlib.rsre.rsre_core.StrMatchContext.inst__string 64>)
+58: i7 = strgetitem(p6, i3)
+64: i9 = int_eq(i7, 51)
guard_false(i9, descr=<Guard112>) [i3, p1]
+74: i11 = int_add(i3, 1)
+78: i12 = int_lt(i11, i4)
guard_false(i12, descr=<Guard113>) [i11, p1]
+87: finish(0, descr=<DoneWithThisFrameDescrInt object at 0x1888940>)
+129: --end of the loop--
[b23577f427d] jit-log-opt-bridge}
[b2357ae4bf9] {jit-backend
[b2357af5e29] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f491416738d +0  488DA50000000049BBB8C2FB16497F00004D8B3B4983C70149BBB8C2FB16497F00004D893B4C8B7E404D0FB67C3F184983FF330F84000000004883C7014C8B7E084C39FF0F8C00000000B80000000048890425D0D1550141BBD01BF30041FFD3B802000000488D65D8415F415E415D415C5B5DC349BB00501614497F000041FFD31D18037200000049BB00501614497F000041FFD31D180373000000
[b2357af91d7] jit-backend-dump}
[b2357af9671] {jit-backend-addr
bridge out of Guard 113 has address 7f491416738d to 7f4914167401
[b2357af9fe3] jit-backend-addr}
[b2357afa547] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167390 +0  70FFFFFF
[b2357afaff9] jit-backend-dump}
[b2357afb599] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141673c2 +0  3B000000
[b2357afc05f] jit-backend-dump}
[b2357afc493] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141673d3 +0  3E000000
[b2357afcf2f] jit-backend-dump}
[b2357afd4b9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167323 +0  66000000
[b2357b04fa1] jit-backend-dump}
[b2357b0571b] jit-backend}
[b2357b0611d] {jit-log-opt-bridge
# bridge out of Guard 113 with 10 ops
[i0, p1]
debug_merge_point(0, 're StrLiteralSearch at 11/51 [17. 8. 3. 1. 1. 1. 1. 51. 0. 19. 51. 1]')
+37: p2 = getfield_gc(p1, descr=<FieldP pypy.rlib.rsre.rsre_core.StrMatchContext.inst__string 64>)
+41: i3 = strgetitem(p2, i0)
+47: i5 = int_eq(i3, 51)
guard_false(i5, descr=<Guard114>) [i0, p1]
+57: i7 = int_add(i0, 1)
+61: i8 = getfield_gc_pure(p1, descr=<FieldS pypy.rlib.rsre.rsre_core.AbstractMatchContext.inst_end 8>)
+65: i9 = int_lt(i7, i8)
guard_false(i9, descr=<Guard115>) [i7, p1]
+74: finish(0, descr=<DoneWithThisFrameDescrInt object at 0x1888940>)
+116: --end of the loop--
[b2357b0f3f9] jit-log-opt-bridge}
[b2357e450c3] {jit-backend
[b2357e4ebbd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167429 +0  488DA50000000049BBD0C2FB16497F0000498B334883C60149BBD0C2FB16497F0000498933B80000000048890425D0D1550141BBD01BF30041FFD3B802000000488D65D8415F415E415D415C5B5DC3
[b2357e51471] jit-backend-dump}
[b2357e518f1] {jit-backend-addr
bridge out of Guard 111 has address 7f4914167429 to 7f4914167478
[b2357e521b1] jit-backend-addr}
[b2357e526f9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f491416742c +0  70FFFFFF
[b2357e53241] jit-backend-dump}
[b2357e538b1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167302 +0  23010000
[b2357e54323] jit-backend-dump}
[b2357e54939] jit-backend}
[b2357e5514d] {jit-log-opt-bridge
# bridge out of Guard 111 with 1 ops
[i0, p1]
+37: finish(0, descr=<DoneWithThisFrameDescrInt object at 0x1888940>)
+79: --end of the loop--
[b2357e57999] jit-log-opt-bridge}
[b2358dd6121] {jit-backend
[b2358f664ff] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f491416765f
[b2358fa1b0f] jit-backend-dump}
[b2358fa27d3] {jit-backend-addr
Loop 6 (<code object inlined_str_stuff, file 'source.py', line 40> #44 FOR_ITER) has address 7f4914167695 to 7f49141682b8 (bootstrap 7f491416765f)
[b2358fa3cd9] jit-backend-addr}
[b2358fa4b27] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167691 +0  E0FDFFFF
[b2358fa5821] jit-backend-dump}
[b2358fa6345] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f491416776e +0  460B0000
[b2358fa6dcf] jit-backend-dump}
[b2358fa733b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f491416777a +0  5C0B0000
[b2358fa7ef9] jit-backend-dump}
[b2358fa83dd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167787 +0  6F0B0000
[b2358fa8cc1] jit-backend-dump}
[b2358fa9113] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f491416779b +0  7C0B0000
[b2358fa99f1] jit-backend-dump}
[b2358fa9e0d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141677ac +0  8E0B0000
[b2358faa831] jit-backend-dump}
[b2358faad29] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141677be +0  9F0B0000
[b2358fab7a7] jit-backend-dump}
[b2358fabbdd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141677d0 +0  AF0B0000
[b2358fac48f] jit-backend-dump}
[b2358fac89d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141677e3 +0  BC0B0000
[b2358fad177] jit-backend-dump}
[b2358fad585] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167801 +0  BC0B0000
[b2358fade29] jit-backend-dump}
[b2358fae311] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167818 +0  C30B0000
[b2358faed4f] jit-backend-dump}
[b2358faf4e5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167838 +0  E00B0000
[b2358faffa5] jit-backend-dump}
[b2358fb04bb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167860 +0  D60B0000
[b2358fb0f21] jit-backend-dump}
[b2358fb133f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f491416786e +0  E60B0000
[b2358fb1bd3] jit-backend-dump}
[b2358fb2063] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167885 +0  090C0000
[b2358fb2b6d] jit-backend-dump}
[b2358fb30a9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f491416789a +0  120C0000
[b2358fb3aab] jit-backend-dump}
[b2358fb3f99] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141678b3 +0  180C0000
[b2358fb48fd] jit-backend-dump}
[b2358fb4e5d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141679b4 +0  360B0000
[b2358fb57cd] jit-backend-dump}
[b2358fb7e23] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141679c3 +0  4B0B0000
[b2358fb888f] jit-backend-dump}
[b2358fb8dd1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167a59 +0  D90A0000
[b2358fb9863] jit-backend-dump}
[b2358fb9d85] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167a68 +0  EE0A0000
[b2358fba723] jit-backend-dump}
[b2358fbab2f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167a82 +0  F80A0000
[b2358fbb3d1] jit-backend-dump}
[b2358fbb7df] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167aa8 +0  F60A0000
[b2358fbc1ed] jit-backend-dump}
[b2358fbc5e7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167ab5 +0  0B0B0000
[b2358fbcfc7] jit-backend-dump}
[b2358fbd525] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167ac9 +0  190B0000
[b2358fbdf0b] jit-backend-dump}
[b2358fbe347] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167ad7 +0  2F0B0000
[b2358fbebe3] jit-backend-dump}
[b2358fbf07f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167b04 +0  440B0000
[b2358fbf92d] jit-backend-dump}
[b2358fbfd27] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167b1a +0  4F0B0000
[b2358fc05bd] jit-backend-dump}
[b2358fc0ac3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167b2f +0  5D0B0000
[b2358fc1591] jit-backend-dump}
[b2358fc1a93] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167b3d +0  730B0000
[b2358fc248b] jit-backend-dump}
[b2358fc2989] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167b54 +0  7F0B0000
[b2358fc3235] jit-backend-dump}
[b2358fc3631] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167b6e +0  890B0000
[b2358fc3ed9] jit-backend-dump}
[b2358fc42e3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167b78 +0  A40B0000
[b2358fc4b7f] jit-backend-dump}
[b2358fc509d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167b82 +0  C00B0000
[b2358fc5a95] jit-backend-dump}
[b2358fc5f9d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167b95 +0  D20B0000
[b2358fc6849] jit-backend-dump}
[b2358fc6c51] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167c9a +0  F10A0000
[b2358fc74fb] jit-backend-dump}
[b2358fc78f9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167ca9 +0  050B0000
[b2358fc8193] jit-backend-dump}
[b2358fc8599] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167cb2 +0  1F0B0000
[b2358fc8fc3] jit-backend-dump}
[b2358fc94d7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167cc6 +0  2D0B0000
[b2358fc9f9d] jit-backend-dump}
[b2358fca493] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167cd4 +0  3E0B0000
[b2358fcad39] jit-backend-dump}
[b2358fcb1b7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167d19 +0  320B0000
[b2358fcba51] jit-backend-dump}
[b2358fcbe91] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167d4b +0  1B0B0000
[b2358fcc739] jit-backend-dump}
[b2358fccb3f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167d60 +0  210B0000
[b2358fcd54f] jit-backend-dump}
[b2358fcd95b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167d71 +0  2D0B0000
[b2358fce207] jit-backend-dump}
[b2358fce607] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167d83 +0  380B0000
[b2358fceed9] jit-backend-dump}
[b2358fcf2e9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167da9 +0  2E0B0000
[b2358fcfb91] jit-backend-dump}
[b2358fcffb1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167dc0 +0  330B0000
[b2358fd0b81] jit-backend-dump}
[b2358fd1255] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167de0 +0  4C0B0000
[b2358fd1b17] jit-backend-dump}
[b2358fd3ebf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167dea +0  5E0B0000
[b2358fd4a01] jit-backend-dump}
[b2358fd4f2b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167e01 +0  650B0000
[b2358fd59c7] jit-backend-dump}
[b2358fd5ebb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167e16 +0  6F0B0000
[b2358fd6873] jit-backend-dump}
[b2358fd6d67] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167e30 +0  750B0000
[b2358fd7789] jit-backend-dump}
[b2358fd7ca7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167f3c +0  890A0000
[b2358fd8569] jit-backend-dump}
[b2358fd8985] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167f4b +0  A00A0000
[b2358fd922f] jit-backend-dump}
[b2358fd9641] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167fe1 +0  300A0000
[b2358fd9f11] jit-backend-dump}
[b2358fda321] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167ff0 +0  470A0000
[b2358fdacef] jit-backend-dump}
[b2358fdb217] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f491416800a +0  530A0000
[b2358fdbc6d] jit-backend-dump}
[b2358fdc15d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914168030 +0  530A0000
[b2358fdca07] jit-backend-dump}
[b2358fdce11] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f491416803d +0  6A0A0000
[b2358fdd7a3] jit-backend-dump}
[b2358fddb85] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914168051 +0  7A0A0000
[b2358fde435] jit-backend-dump}
[b2358fde93f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f491416805f +0  910A0000
[b2358fdf38b] jit-backend-dump}
[b2358fdf949] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f491416808c +0  A80A0000
[b2358fe033d] jit-backend-dump}
[b2358fe0795] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141680a2 +0  B40A0000
[b2358fe1041] jit-backend-dump}
[b2358fe1453] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141680b7 +0  C30A0000
[b2358fe1d0b] jit-backend-dump}
[b2358fe2125] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141680c5 +0  DA0A0000
[b2358fe2b35] jit-backend-dump}
[b2358fe306b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141680dc +0  E70A0000
[b2358fe3f39] jit-backend-dump}
[b2358fe436b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141680f6 +0  F20A0000
[b2358fe4c0f] jit-backend-dump}
[b2358fe501d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914168100 +0  0E0B0000
[b2358fe58ed] jit-backend-dump}
[b2358fe5cf9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f491416810a +0  2B0B0000
[b2358fe659b] jit-backend-dump}
[b2358fe6a9f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f491416811d +0  3E0B0000
[b2358fe752d] jit-backend-dump}
[b2358fe7a41] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914168226 +0  5A0A0000
[b2358fe8499] jit-backend-dump}
[b2358fe88d1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914168235 +0  700A0000
[b2358fe919f] jit-backend-dump}
[b2358fe95ab] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f491416823e +0  8C0A0000
[b2358fe9e4d] jit-backend-dump}
[b2358fea25f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914168252 +0  9C0A0000
[b2358feabad] jit-backend-dump}
[b2358feb0d5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914168260 +0  AE0A0000
[b2358febb61] jit-backend-dump}
[b2358fec0c7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141682a9 +0  9F0A0000
[b2358fec987] jit-backend-dump}
[b2358fed65b] jit-backend}
[b2358fefab1] {jit-log-opt-loop
# Loop 6 (<code object inlined_str_stuff, file 'source.py', line 40> #44 FOR_ITER) : loop with 351 ops
[p0, p1]
+84: p2 = getfield_gc(p0, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_last_exception 80>)
+88: p3 = getfield_gc(p0, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_pycode 120>)
+92: i4 = getfield_gc(p0, descr=<FieldU pypy.interpreter.pyframe.PyFrame.inst_is_being_profiled 150>)
+100: p5 = getfield_gc(p0, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_lastblock 96>)
+104: i6 = getfield_gc(p0, descr=<FieldS pypy.interpreter.pyframe.PyFrame.inst_valuestackdepth 128>)
+111: i7 = getfield_gc(p0, descr=<FieldS pypy.interpreter.pyframe.PyFrame.inst_last_instr 88>)
+115: p8 = getfield_gc(p0, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_locals_stack_w 104>)
+119: p10 = getarrayitem_gc(p8, 0, descr=<ArrayP 8>)
+123: p12 = getarrayitem_gc(p8, 1, descr=<ArrayP 8>)
+127: p14 = getarrayitem_gc(p8, 2, descr=<ArrayP 8>)
+131: p16 = getarrayitem_gc(p8, 3, descr=<ArrayP 8>)
+135: p18 = getarrayitem_gc(p8, 4, descr=<ArrayP 8>)
+146: p20 = getarrayitem_gc(p8, 5, descr=<ArrayP 8>)
+157: p22 = getarrayitem_gc(p8, 6, descr=<ArrayP 8>)
+168: p24 = getarrayitem_gc(p8, 7, descr=<ArrayP 8>)
+172: p25 = getfield_gc(p0, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_cells 40>)
+172: label(p0, p1, p2, p3, i4, p5, i6, i7, p10, p12, p14, p16, p18, p20, p22, p24, descr=TargetToken(139951894600368))
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #44 FOR_ITER')
+265: guard_value(i6, 4, descr=<Guard122>) [i6, p1, p0, p2, p3, i4, p5, i7, p10, p12, p14, p16, p18, p20, p22, p24]
+275: guard_class(p16, 38562496, descr=<Guard123>) [p1, p0, p16, p2, p3, i4, p5, p10, p12, p14, p18, p20, p22, p24]
+287: p28 = getfield_gc(p16, descr=<FieldP pypy.objspace.std.iterobject.W_AbstractSeqIterObject.inst_w_seq 16>)
+291: guard_nonnull(p28, descr=<Guard124>) [p1, p0, p16, p28, p2, p3, i4, p5, p10, p12, p14, p18, p20, p22, p24]
+300: i29 = getfield_gc(p16, descr=<FieldS pypy.objspace.std.iterobject.W_AbstractSeqIterObject.inst_index 8>)
+304: p30 = getfield_gc(p28, descr=<FieldP pypy.objspace.std.listobject.W_ListObject.inst_strategy 16>)
+308: guard_class(p30, 38655536, descr=<Guard125>) [p1, p0, p16, i29, p30, p28, p2, p3, i4, p5, p10, p12, p14, p18, p20, p22, p24]
+320: p32 = getfield_gc(p28, descr=<FieldP pypy.objspace.std.listobject.W_ListObject.inst_lstorage 8>)
+324: i33 = getfield_gc(p32, descr=<FieldS list.length 8>)
+328: i34 = uint_ge(i29, i33)
guard_false(i34, descr=<Guard126>) [p1, p0, p16, i29, i33, p32, p2, p3, i4, p5, p10, p12, p14, p18, p20, p22, p24]
+337: p35 = getfield_gc(p32, descr=<FieldP list.items 16>)
+341: p36 = getarrayitem_gc(p35, i29, descr=<ArrayP 8>)
+346: guard_nonnull(p36, descr=<Guard127>) [p1, p0, p16, i29, p36, p2, p3, i4, p5, p10, p12, p14, p18, p20, p22, p24]
+355: i38 = int_add(i29, 1)
+359: setfield_gc(p16, i38, descr=<FieldS pypy.objspace.std.iterobject.W_AbstractSeqIterObject.inst_index 8>)
+363: guard_value(i4, 0, descr=<Guard128>) [i4, p1, p0, p2, p3, p5, p10, p12, p14, p16, p20, p22, p24, p36]
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #47 STORE_FAST')
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #50 LOAD_GLOBAL')
+373: guard_value(p3, ConstPtr(ptr40), descr=<Guard129>) [p1, p0, p3, p2, p5, p10, p12, p16, p20, p22, p24, p36]
+392: p41 = getfield_gc(p0, descr=<FieldP pypy.interpreter.eval.Frame.inst_w_globals 8>)
+403: guard_value(p41, ConstPtr(ptr42), descr=<Guard130>) [p1, p0, p41, p2, p5, p10, p12, p16, p20, p22, p24, p36]
+422: p43 = getfield_gc(p41, descr=<FieldP pypy.objspace.std.dictmultiobject.W_DictMultiObject.inst_strategy 16>)
+426: guard_value(p43, ConstPtr(ptr44), descr=<Guard131>) [p1, p0, p43, p41, p2, p5, p10, p12, p16, p20, p22, p24, p36]
+445: guard_not_invalidated(, descr=<Guard132>) [p1, p0, p41, p2, p5, p10, p12, p16, p20, p22, p24, p36]
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #53 LOOKUP_METHOD')
+445: p46 = getfield_gc(ConstPtr(ptr45), descr=<FieldP pypy.objspace.std.dictmultiobject.W_DictMultiObject.inst_strategy 16>)
+458: guard_value(p46, ConstPtr(ptr47), descr=<Guard133>) [p1, p0, p46, p2, p5, p10, p12, p16, p20, p22, p24, p36]
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #56 LOAD_CONST')
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #59 LOAD_FAST')
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #62 CALL_METHOD')
+477: p49 = call(ConstClass(getexecutioncontext), descr=<Callr 8 EF=1>)
+500: p50 = getfield_gc(p49, descr=<FieldP pypy.interpreter.executioncontext.ExecutionContext.inst_topframeref 64>)
+504: i51 = force_token()
+504: p52 = getfield_gc(p49, descr=<FieldP pypy.interpreter.executioncontext.ExecutionContext.inst_w_tracefunc 80>)
+508: guard_isnull(p52, descr=<Guard134>) [p1, p0, p49, p52, p2, p5, p10, p12, p16, i51, p50, p36]
+517: i53 = getfield_gc(p49, descr=<FieldU pypy.interpreter.executioncontext.ExecutionContext.inst_profilefunc 40>)
+521: i54 = int_is_zero(i53)
guard_true(i54, descr=<Guard135>) [p1, p0, p49, p2, p5, p10, p12, p16, i51, p50, p36]
debug_merge_point(1, '<code object search. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 139> #0 LOAD_GLOBAL')
+531: guard_not_invalidated(, descr=<Guard136>) [p1, p0, p49, p2, p5, p10, p12, p16, i51, p50, p36]
debug_merge_point(1, '<code object search. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 139> #3 LOAD_FAST')
debug_merge_point(1, '<code object search. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 139> #6 LOAD_FAST')
debug_merge_point(1, '<code object search. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 139> #9 CALL_FUNCTION')
+531: i56 = getfield_gc(ConstPtr(ptr55), descr=<FieldS list.length 8>)
+544: i58 = int_ge(0, i56)
guard_true(i58, descr=<Guard137>) [p1, p0, p49, i56, p2, p5, p10, p12, p16, i51, p50, p36]
+554: i59 = force_token()
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #0 LOAD_GLOBAL')
+554: p61 = getfield_gc(ConstPtr(ptr60), descr=<FieldP pypy.objspace.std.dictmultiobject.W_DictMultiObject.inst_strategy 16>)
+562: guard_value(p61, ConstPtr(ptr62), descr=<Guard138>) [p1, p0, p49, p61, p2, p5, p10, p12, p16, i59, i51, p50, p36]
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #3 LOAD_FAST')
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #6 LOAD_CONST')
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #9 BINARY_SUBSCR')
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #10 CALL_FUNCTION')
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #13 BUILD_TUPLE')
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #16 LOAD_FAST')
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #19 BINARY_ADD')
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #20 STORE_FAST')
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #23 LOAD_GLOBAL')
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #26 LOOKUP_METHOD')
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #29 LOAD_FAST')
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #32 CALL_METHOD')
+575: p64 = getfield_gc(ConstPtr(ptr63), descr=<FieldP pypy.objspace.std.dictmultiobject.W_DictMultiObject.inst_strategy 16>)
+588: guard_class(p64, ConstClass(ObjectDictStrategy), descr=<Guard139>) [p1, p0, p49, p64, p2, p5, p10, p12, p16, i59, i51, p50, p36]
+600: p66 = getfield_gc(ConstPtr(ptr63), descr=<FieldP pypy.objspace.std.dictmultiobject.W_DictMultiObject.inst_dstorage 8>)
+613: i67 = force_token()
p69 = new_array(3, descr=<ArrayP 8>)
p71 = new_with_vtable(38637968)
+705: setfield_gc(p71, i59, descr=<FieldS JitVirtualRef.virtual_token 8>)
setfield_gc(p49, p71, descr=<FieldP pypy.interpreter.executioncontext.ExecutionContext.inst_topframeref 64>)
+752: setfield_gc(p0, i67, descr=<FieldS pypy.interpreter.pyframe.PyFrame.vable_token 24>)
+756: setarrayitem_gc(p69, 0, ConstPtr(ptr73), descr=<ArrayP 8>)
+764: setarrayitem_gc(p69, 1, ConstPtr(ptr75), descr=<ArrayP 8>)
+778: setarrayitem_gc(p69, 2, ConstPtr(ptr77), descr=<ArrayP 8>)
+792: i79 = call_may_force(ConstClass(hash_tuple), p69, descr=<Calli 8 r EF=6>)
guard_not_forced(, descr=<Guard116>) [p1, p0, p49, p66, i79, p71, p2, p5, p10, p12, p16, i51, p36, p50, p69]
+857: guard_no_exception(, descr=<Guard140>) [p1, p0, p49, p66, i79, p71, p2, p5, p10, p12, p16, i51, p36, p50, p69]
+872: i80 = force_token()
p82 = new_with_vtable(38549536)
+942: setfield_gc(p0, i80, descr=<FieldS pypy.interpreter.pyframe.PyFrame.vable_token 24>)
+953: setfield_gc(p82, p69, descr=<FieldP pypy.objspace.std.tupleobject.W_TupleObject.inst_wrappeditems 8>)
+964: i84 = call_may_force(ConstClass(ll_dict_lookup_trampoline__v693___simple_call__function_l), p66, p82, i79, descr=<Calli 8 rri EF=6>)
guard_not_forced(, descr=<Guard117>) [p1, p0, p49, p82, i84, p66, p71, p2, p5, p10, p12, p16, p36, i51, p50]
+1022: guard_no_exception(, descr=<Guard141>) [p1, p0, p49, p82, i84, p66, p71, p2, p5, p10, p12, p16, p36, i51, p50]
+1037: i86 = int_and(i84, -9223372036854775808)
+1053: i87 = int_is_true(i86)
guard_false(i87, descr=<Guard142>) [p1, p0, p49, p82, i84, p66, p71, p2, p5, p10, p12, p16, p36, i51, p50]
+1063: p88 = getfield_gc(p66, descr=<FieldP dicttable.entries 24>)
+1074: p89 = getinteriorfield_gc(p88, i84, descr=<InteriorFieldDescr <FieldP dictentry.value 8>>)
+1083: guard_nonnull_class(p89, 38793968, descr=<Guard143>) [p1, p0, p49, p82, p89, p71, p2, p5, p10, p12, p16, p36, i51, p50]
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #35 STORE_FAST')
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #38 LOAD_FAST')
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #41 LOAD_CONST')
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #44 COMPARE_OP')
+1101: i92 = instance_ptr_eq(ConstPtr(ptr91), p89)
guard_false(i92, descr=<Guard144>) [p1, p0, p49, p71, p2, p5, p10, p12, p16, p89, p82, p36, i51, p50]
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #47 POP_JUMP_IF_FALSE')
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #50 LOAD_FAST')
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #53 RETURN_VALUE')
+1114: p93 = getfield_gc(p49, descr=<FieldP pypy.interpreter.executioncontext.ExecutionContext.inst_w_tracefunc 80>)
+1125: guard_isnull(p93, descr=<Guard145>) [p1, p0, p49, p89, p93, p71, p2, p5, p10, p12, p16, None, p82, p36, i51, p50]
+1134: i95 = getfield_gc(p49, descr=<FieldU pypy.interpreter.executioncontext.ExecutionContext.inst_profilefunc 40>)
+1138: i96 = int_is_true(i95)
guard_false(i96, descr=<Guard146>) [p1, p0, p49, p89, p71, p2, p5, p10, p12, p16, None, p82, p36, i51, p50]
+1148: p97 = getfield_gc(p49, descr=<FieldP pypy.interpreter.executioncontext.ExecutionContext.inst_topframeref 64>)
debug_merge_point(1, '<code object search. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 139> #12 LOOKUP_METHOD')
+1148: setfield_gc(p71, -3, descr=<FieldS JitVirtualRef.virtual_token 8>)
debug_merge_point(1, '<code object search. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 139> #15 LOAD_FAST')
debug_merge_point(1, '<code object search. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 139> #18 CALL_METHOD')
+1163: guard_not_invalidated(, descr=<Guard147>) [p1, p0, p49, p2, p5, p10, p12, p16, p89, None, p36, i51, p50]
+1163: i99 = strlen(p36)
+1174: i101 = int_gt(9223372036854775807, i99)
guard_true(i101, descr=<Guard148>) [p1, p0, p49, p89, p36, p2, p5, p10, p12, p16, None, None, None, i51, p50]
+1193: p102 = getfield_gc_pure(p89, descr=<FieldP pypy.module._sre.interp_sre.W_SRE_Pattern.inst_code 16>)
+1197: i103 = getfield_gc_pure(p89, descr=<FieldS pypy.module._sre.interp_sre.W_SRE_Pattern.inst_flags 24>)
+1201: i105 = getarrayitem_gc_pure(p102, 0, descr=<ArrayS 8>)
+1205: i107 = int_eq(i105, 17)
guard_true(i107, descr=<Guard149>) [p1, p0, p49, p89, p2, p5, p10, p12, p16, p102, i99, i103, None, None, p36, i51, p50]
+1215: i109 = getarrayitem_gc_pure(p102, 2, descr=<ArrayS 8>)
+1219: i111 = int_and(i109, 1)
+1226: i112 = int_is_true(i111)
guard_true(i112, descr=<Guard150>) [p1, p0, p49, p89, i109, p2, p5, p10, p12, p16, p102, i99, i103, None, None, p36, i51, p50]
+1236: i114 = getarrayitem_gc_pure(p102, 5, descr=<ArrayS 8>)
+1240: i116 = int_gt(i114, 1)
guard_false(i116, descr=<Guard151>) [p1, p0, p49, p89, p2, p5, p10, p12, p16, p102, i99, i103, None, None, p36, i51, p50]
+1250: i118 = getarrayitem_gc_pure(p102, 1, descr=<ArrayS 8>)
+1254: i120 = int_add(i118, 1)
+1258: i121 = getarrayitem_gc_pure(p102, i120, descr=<ArrayS 8>)
+1263: i123 = int_eq(i121, 19)
guard_true(i123, descr=<Guard152>) [p1, p0, p49, p89, i120, p2, p5, p10, p12, p16, p102, i99, i103, None, None, p36, i51, p50]
+1273: i125 = int_add(i120, 1)
+1280: i126 = getarrayitem_gc_pure(p102, i125, descr=<ArrayS 8>)
+1285: i128 = int_add(i120, 2)
+1289: i130 = int_lt(0, i99)
guard_true(i130, descr=<Guard153>) [p1, p0, p49, p89, i126, i128, p2, p5, p10, p12, p16, p102, i99, i103, None, None, p36, i51, p50]
+1299: guard_value(i128, 11, descr=<Guard154>) [p1, p0, p49, p89, i126, i128, p102, p2, p5, p10, p12, p16, None, i99, i103, None, None, p36, i51, p50]
+1309: guard_value(i126, 51, descr=<Guard155>) [p1, p0, p49, p89, i126, p102, p2, p5, p10, p12, p16, None, i99, i103, None, None, p36, i51, p50]
+1319: guard_value(p102, ConstPtr(ptr133), descr=<Guard156>) [p1, p0, p49, p89, p102, p2, p5, p10, p12, p16, None, i99, i103, None, None, p36, i51, p50]
debug_merge_point(2, 're StrLiteralSearch at 11/51 [17. 8. 3. 1. 1. 1. 1. 51. 0. 19. 51. 1]')
+1338: i134 = force_token()
p136 = new_with_vtable(38602768)
p137 = new_with_vtable(38637968)
+1422: setfield_gc(p137, i51, descr=<FieldS JitVirtualRef.virtual_token 8>)
setfield_gc(p49, p137, descr=<FieldP pypy.interpreter.executioncontext.ExecutionContext.inst_topframeref 64>)
+1469: setfield_gc(p0, i134, descr=<FieldS pypy.interpreter.pyframe.PyFrame.vable_token 24>)
+1480: setfield_gc(p136, ConstPtr(ptr133), descr=<FieldP pypy.rlib.rsre.rsre_core.AbstractMatchContext.inst_pattern 56>)
+1494: setfield_gc(p136, i103, descr=<FieldS pypy.rlib.rsre.rsre_core.AbstractMatchContext.inst_flags 16>)
+1498: setfield_gc(p136, i99, descr=<FieldS pypy.rlib.rsre.rsre_core.AbstractMatchContext.inst_end 8>)
+1502: setfield_gc(p136, p36, descr=<FieldP pypy.rlib.rsre.rsre_core.StrMatchContext.inst__string 64>)
+1506: i138 = call_assembler(0, p136, descr=<Loop5>)
guard_not_forced(, descr=<Guard118>) [p1, p0, p49, p136, p89, i138, p137, p2, p5, p10, p12, p16, p36, p50]
+1599: guard_no_exception(, descr=<Guard157>) [p1, p0, p49, p136, p89, i138, p137, p2, p5, p10, p12, p16, p36, p50]
+1614: guard_false(i138, descr=<Guard158>) [p1, p0, p49, p136, p89, p137, p2, p5, p10, p12, p16, p36, p50]
debug_merge_point(1, '<code object search. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 139> #21 RETURN_VALUE')
+1623: p139 = getfield_gc(p49, descr=<FieldP pypy.interpreter.executioncontext.ExecutionContext.inst_w_tracefunc 80>)
+1634: guard_isnull(p139, descr=<Guard159>) [p1, p0, p49, p139, p137, p2, p5, p10, p12, p16, p36, p50]
+1643: i140 = getfield_gc(p49, descr=<FieldU pypy.interpreter.executioncontext.ExecutionContext.inst_profilefunc 40>)
+1647: i141 = int_is_true(i140)
guard_false(i141, descr=<Guard160>) [p1, p0, p49, p137, p2, p5, p10, p12, p16, p36, p50]
+1657: p142 = getfield_gc(p49, descr=<FieldP pypy.interpreter.executioncontext.ExecutionContext.inst_topframeref 64>)
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #65 POP_TOP')
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #66 JUMP_ABSOLUTE')
setfield_gc(p49, p50, descr=<FieldP pypy.interpreter.executioncontext.ExecutionContext.inst_topframeref 64>)
+1693: setfield_gc(p137, -3, descr=<FieldS JitVirtualRef.virtual_token 8>)
+1708: guard_not_invalidated(, descr=<Guard161>) [p1, p0, p2, p5, p10, p12, p16, p36, None]
+1708: i145 = getfield_raw(44057928, descr=<FieldS pypysig_long_struct.c_value 0>)
+1716: i147 = int_lt(i145, 0)
guard_false(i147, descr=<Guard162>) [p1, p0, p2, p5, p10, p12, p16, p36, None]
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #44 FOR_ITER')
+1726: label(p0, p1, p2, p5, p10, p12, p36, p16, i140, p49, p50, descr=TargetToken(139951894600448))
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #44 FOR_ITER')
+1756: p148 = getfield_gc(p16, descr=<FieldP pypy.objspace.std.iterobject.W_AbstractSeqIterObject.inst_w_seq 16>)
+1767: guard_nonnull(p148, descr=<Guard163>) [p1, p0, p16, p148, p2, p5, p10, p12, p36]
+1776: i149 = getfield_gc(p16, descr=<FieldS pypy.objspace.std.iterobject.W_AbstractSeqIterObject.inst_index 8>)
+1780: p150 = getfield_gc(p148, descr=<FieldP pypy.objspace.std.listobject.W_ListObject.inst_strategy 16>)
+1784: guard_class(p150, 38655536, descr=<Guard164>) [p1, p0, p16, i149, p150, p148, p2, p5, p10, p12, p36]
+1797: p151 = getfield_gc(p148, descr=<FieldP pypy.objspace.std.listobject.W_ListObject.inst_lstorage 8>)
+1801: i152 = getfield_gc(p151, descr=<FieldS list.length 8>)
+1805: i153 = uint_ge(i149, i152)
guard_false(i153, descr=<Guard165>) [p1, p0, p16, i149, i152, p151, p2, p5, p10, p12, p36]
+1814: p154 = getfield_gc(p151, descr=<FieldP list.items 16>)
+1818: p155 = getarrayitem_gc(p154, i149, descr=<ArrayP 8>)
+1823: guard_nonnull(p155, descr=<Guard166>) [p1, p0, p16, i149, p155, p2, p5, p10, p12, p36]
+1832: i156 = int_add(i149, 1)
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #47 STORE_FAST')
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #50 LOAD_GLOBAL')
+1836: p157 = getfield_gc(p0, descr=<FieldP pypy.interpreter.eval.Frame.inst_w_globals 8>)
+1847: setfield_gc(p16, i156, descr=<FieldS pypy.objspace.std.iterobject.W_AbstractSeqIterObject.inst_index 8>)
+1851: guard_value(p157, ConstPtr(ptr42), descr=<Guard167>) [p1, p0, p157, p2, p5, p10, p12, p16, p155, None]
+1870: p158 = getfield_gc(p157, descr=<FieldP pypy.objspace.std.dictmultiobject.W_DictMultiObject.inst_strategy 16>)
+1874: guard_value(p158, ConstPtr(ptr44), descr=<Guard168>) [p1, p0, p158, p157, p2, p5, p10, p12, p16, p155, None]
+1893: guard_not_invalidated(, descr=<Guard169>) [p1, p0, p157, p2, p5, p10, p12, p16, p155, None]
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #53 LOOKUP_METHOD')
+1893: p159 = getfield_gc(ConstPtr(ptr45), descr=<FieldP pypy.objspace.std.dictmultiobject.W_DictMultiObject.inst_strategy 16>)
+1906: guard_value(p159, ConstPtr(ptr47), descr=<Guard170>) [p1, p0, p159, p2, p5, p10, p12, p16, p155, None]
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #56 LOAD_CONST')
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #59 LOAD_FAST')
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #62 CALL_METHOD')
+1925: i160 = force_token()
+1925: i161 = int_is_zero(i140)
guard_true(i161, descr=<Guard171>) [p1, p0, p49, p2, p5, p10, p12, p16, i160, p50, p155, None]
debug_merge_point(1, '<code object search. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 139> #0 LOAD_GLOBAL')
debug_merge_point(1, '<code object search. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 139> #3 LOAD_FAST')
debug_merge_point(1, '<code object search. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 139> #6 LOAD_FAST')
debug_merge_point(1, '<code object search. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 139> #9 CALL_FUNCTION')
+1935: i162 = getfield_gc(ConstPtr(ptr55), descr=<FieldS list.length 8>)
+1948: i163 = int_ge(0, i162)
guard_true(i163, descr=<Guard172>) [p1, p0, p49, i162, p2, p5, p10, p12, p16, i160, p50, p155, None]
+1958: i164 = force_token()
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #0 LOAD_GLOBAL')
+1958: p165 = getfield_gc(ConstPtr(ptr60), descr=<FieldP pypy.objspace.std.dictmultiobject.W_DictMultiObject.inst_strategy 16>)
+1966: guard_value(p165, ConstPtr(ptr62), descr=<Guard173>) [p1, p0, p49, p165, p2, p5, p10, p12, p16, i164, i160, p50, p155, None]
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #3 LOAD_FAST')
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #6 LOAD_CONST')
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #9 BINARY_SUBSCR')
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #10 CALL_FUNCTION')
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #13 BUILD_TUPLE')
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #16 LOAD_FAST')
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #19 BINARY_ADD')
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #20 STORE_FAST')
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #23 LOAD_GLOBAL')
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #26 LOOKUP_METHOD')
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #29 LOAD_FAST')
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #32 CALL_METHOD')
+1979: p166 = getfield_gc(ConstPtr(ptr63), descr=<FieldP pypy.objspace.std.dictmultiobject.W_DictMultiObject.inst_strategy 16>)
+1992: guard_class(p166, ConstClass(ObjectDictStrategy), descr=<Guard174>) [p1, p0, p49, p166, p2, p5, p10, p12, p16, i164, i160, p50, p155, None]
+2005: p167 = getfield_gc(ConstPtr(ptr63), descr=<FieldP pypy.objspace.std.dictmultiobject.W_DictMultiObject.inst_dstorage 8>)
+2018: i168 = force_token()
p169 = new_array(3, descr=<ArrayP 8>)
p170 = new_with_vtable(38637968)
+2117: setfield_gc(p170, i164, descr=<FieldS JitVirtualRef.virtual_token 8>)
setfield_gc(p49, p170, descr=<FieldP pypy.interpreter.executioncontext.ExecutionContext.inst_topframeref 64>)
+2168: setfield_gc(p0, i168, descr=<FieldS pypy.interpreter.pyframe.PyFrame.vable_token 24>)
+2172: setarrayitem_gc(p169, 0, ConstPtr(ptr73), descr=<ArrayP 8>)
+2180: setarrayitem_gc(p169, 1, ConstPtr(ptr75), descr=<ArrayP 8>)
+2194: setarrayitem_gc(p169, 2, ConstPtr(ptr174), descr=<ArrayP 8>)
+2208: i175 = call_may_force(ConstClass(hash_tuple), p169, descr=<Calli 8 r EF=6>)
guard_not_forced(, descr=<Guard119>) [p1, p0, p49, p167, i175, p170, p2, p5, p10, p12, p16, i160, p169, p155, p50]
+2273: guard_no_exception(, descr=<Guard175>) [p1, p0, p49, p167, i175, p170, p2, p5, p10, p12, p16, i160, p169, p155, p50]
+2288: i176 = force_token()
p177 = new_with_vtable(38549536)
+2358: setfield_gc(p0, i176, descr=<FieldS pypy.interpreter.pyframe.PyFrame.vable_token 24>)
+2369: setfield_gc(p177, p169, descr=<FieldP pypy.objspace.std.tupleobject.W_TupleObject.inst_wrappeditems 8>)
+2380: i178 = call_may_force(ConstClass(ll_dict_lookup_trampoline__v693___simple_call__function_l), p167, p177, i175, descr=<Calli 8 rri EF=6>)
guard_not_forced(, descr=<Guard120>) [p1, p0, p49, p177, i178, p167, p170, p2, p5, p10, p12, p16, i160, p155, p50]
+2438: guard_no_exception(, descr=<Guard176>) [p1, p0, p49, p177, i178, p167, p170, p2, p5, p10, p12, p16, i160, p155, p50]
+2453: i179 = int_and(i178, -9223372036854775808)
+2469: i180 = int_is_true(i179)
guard_false(i180, descr=<Guard177>) [p1, p0, p49, p177, i178, p167, p170, p2, p5, p10, p12, p16, i160, p155, p50]
+2479: p181 = getfield_gc(p167, descr=<FieldP dicttable.entries 24>)
+2490: p182 = getinteriorfield_gc(p181, i178, descr=<InteriorFieldDescr <FieldP dictentry.value 8>>)
+2499: guard_nonnull_class(p182, 38793968, descr=<Guard178>) [p1, p0, p49, p177, p182, p170, p2, p5, p10, p12, p16, i160, p155, p50]
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #35 STORE_FAST')
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #38 LOAD_FAST')
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #41 LOAD_CONST')
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #44 COMPARE_OP')
+2517: i183 = instance_ptr_eq(ConstPtr(ptr91), p182)
guard_false(i183, descr=<Guard179>) [p1, p0, p49, p170, p2, p5, p10, p12, p16, p182, p177, i160, p155, p50]
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #47 POP_JUMP_IF_FALSE')
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #50 LOAD_FAST')
debug_merge_point(2, '<code object _compile. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 228> #53 RETURN_VALUE')
+2530: p184 = getfield_gc(p49, descr=<FieldP pypy.interpreter.executioncontext.ExecutionContext.inst_w_tracefunc 80>)
+2541: guard_isnull(p184, descr=<Guard180>) [p1, p0, p49, p182, p184, p170, p2, p5, p10, p12, p16, None, p177, i160, p155, p50]
+2550: i185 = getfield_gc(p49, descr=<FieldU pypy.interpreter.executioncontext.ExecutionContext.inst_profilefunc 40>)
+2554: i186 = int_is_true(i185)
guard_false(i186, descr=<Guard181>) [p1, p0, p49, p182, p170, p2, p5, p10, p12, p16, None, p177, i160, p155, p50]
+2564: p187 = getfield_gc(p49, descr=<FieldP pypy.interpreter.executioncontext.ExecutionContext.inst_topframeref 64>)
debug_merge_point(1, '<code object search. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 139> #12 LOOKUP_METHOD')
+2564: setfield_gc(p170, -3, descr=<FieldS JitVirtualRef.virtual_token 8>)
debug_merge_point(1, '<code object search. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 139> #15 LOAD_FAST')
debug_merge_point(1, '<code object search. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 139> #18 CALL_METHOD')
+2579: guard_not_invalidated(, descr=<Guard182>) [p1, p0, p49, p2, p5, p10, p12, p16, p182, None, i160, p155, p50]
+2579: i189 = strlen(p155)
+2590: i191 = int_gt(9223372036854775807, i189)
guard_true(i191, descr=<Guard183>) [p1, p0, p49, p182, p155, p2, p5, p10, p12, p16, None, None, i160, None, p50]
+2609: p192 = getfield_gc_pure(p182, descr=<FieldP pypy.module._sre.interp_sre.W_SRE_Pattern.inst_code 16>)
+2613: i193 = getfield_gc_pure(p182, descr=<FieldS pypy.module._sre.interp_sre.W_SRE_Pattern.inst_flags 24>)
+2617: i194 = getarrayitem_gc_pure(p192, 0, descr=<ArrayS 8>)
+2621: i195 = int_eq(i194, 17)
guard_true(i195, descr=<Guard184>) [p1, p0, p49, p182, p2, p5, p10, p12, p16, p192, i189, i193, None, None, i160, p155, p50]
+2631: i196 = getarrayitem_gc_pure(p192, 2, descr=<ArrayS 8>)
+2635: i197 = int_and(i196, 1)
+2642: i198 = int_is_true(i197)
guard_true(i198, descr=<Guard185>) [p1, p0, p49, p182, i196, p2, p5, p10, p12, p16, p192, i189, i193, None, None, i160, p155, p50]
+2652: i199 = getarrayitem_gc_pure(p192, 5, descr=<ArrayS 8>)
+2656: i200 = int_gt(i199, 1)
guard_false(i200, descr=<Guard186>) [p1, p0, p49, p182, p2, p5, p10, p12, p16, p192, i189, i193, None, None, i160, p155, p50]
+2666: i201 = getarrayitem_gc_pure(p192, 1, descr=<ArrayS 8>)
+2670: i202 = int_add(i201, 1)
+2674: i203 = getarrayitem_gc_pure(p192, i202, descr=<ArrayS 8>)
+2679: i204 = int_eq(i203, 19)
guard_true(i204, descr=<Guard187>) [p1, p0, p49, p182, i202, p2, p5, p10, p12, p16, p192, i189, i193, None, None, i160, p155, p50]
+2689: i205 = int_add(i202, 1)
+2696: i206 = getarrayitem_gc_pure(p192, i205, descr=<ArrayS 8>)
+2701: i207 = int_add(i202, 2)
+2705: i209 = int_lt(0, i189)
guard_true(i209, descr=<Guard188>) [p1, p0, p49, p182, i206, i207, p2, p5, p10, p12, p16, p192, i189, i193, None, None, i160, p155, p50]
+2715: guard_value(i207, 11, descr=<Guard189>) [p1, p0, p49, p182, i206, i207, p192, p2, p5, p10, p12, p16, None, i189, i193, None, None, i160, p155, p50]
+2725: guard_value(i206, 51, descr=<Guard190>) [p1, p0, p49, p182, i206, p192, p2, p5, p10, p12, p16, None, i189, i193, None, None, i160, p155, p50]
+2735: guard_value(p192, ConstPtr(ptr133), descr=<Guard191>) [p1, p0, p49, p182, p192, p2, p5, p10, p12, p16, None, i189, i193, None, None, i160, p155, p50]
debug_merge_point(2, 're StrLiteralSearch at 11/51 [17. 8. 3. 1. 1. 1. 1. 51. 0. 19. 51. 1]')
+2754: i210 = force_token()
p211 = new_with_vtable(38602768)
p212 = new_with_vtable(38637968)
+2838: setfield_gc(p212, i160, descr=<FieldS JitVirtualRef.virtual_token 8>)
setfield_gc(p49, p212, descr=<FieldP pypy.interpreter.executioncontext.ExecutionContext.inst_topframeref 64>)
+2889: setfield_gc(p0, i210, descr=<FieldS pypy.interpreter.pyframe.PyFrame.vable_token 24>)
+2900: setfield_gc(p211, ConstPtr(ptr133), descr=<FieldP pypy.rlib.rsre.rsre_core.AbstractMatchContext.inst_pattern 56>)
+2914: setfield_gc(p211, i193, descr=<FieldS pypy.rlib.rsre.rsre_core.AbstractMatchContext.inst_flags 16>)
+2918: setfield_gc(p211, i189, descr=<FieldS pypy.rlib.rsre.rsre_core.AbstractMatchContext.inst_end 8>)
+2922: setfield_gc(p211, p155, descr=<FieldP pypy.rlib.rsre.rsre_core.StrMatchContext.inst__string 64>)
+2926: i213 = call_assembler(0, p211, descr=<Loop5>)
guard_not_forced(, descr=<Guard121>) [p1, p0, p49, p211, p182, i213, p212, p2, p5, p10, p12, p16, p155, p50]
+3019: guard_no_exception(, descr=<Guard192>) [p1, p0, p49, p211, p182, i213, p212, p2, p5, p10, p12, p16, p155, p50]
+3034: guard_false(i213, descr=<Guard193>) [p1, p0, p49, p211, p182, p212, p2, p5, p10, p12, p16, p155, p50]
debug_merge_point(1, '<code object search. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 139> #21 RETURN_VALUE')
+3043: p214 = getfield_gc(p49, descr=<FieldP pypy.interpreter.executioncontext.ExecutionContext.inst_w_tracefunc 80>)
+3054: guard_isnull(p214, descr=<Guard194>) [p1, p0, p49, p214, p212, p2, p5, p10, p12, p16, p155, p50]
+3063: i215 = getfield_gc(p49, descr=<FieldU pypy.interpreter.executioncontext.ExecutionContext.inst_profilefunc 40>)
+3067: i216 = int_is_true(i215)
guard_false(i216, descr=<Guard195>) [p1, p0, p49, p212, p2, p5, p10, p12, p16, p155, p50]
+3077: p217 = getfield_gc(p49, descr=<FieldP pypy.interpreter.executioncontext.ExecutionContext.inst_topframeref 64>)
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #65 POP_TOP')
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #66 JUMP_ABSOLUTE')
setfield_gc(p49, p50, descr=<FieldP pypy.interpreter.executioncontext.ExecutionContext.inst_topframeref 64>)
+3117: setfield_gc(p212, -3, descr=<FieldS JitVirtualRef.virtual_token 8>)
+3132: guard_not_invalidated(, descr=<Guard196>) [p1, p0, p2, p5, p10, p12, p16, p155, None]
+3132: i219 = getfield_raw(44057928, descr=<FieldS pypysig_long_struct.c_value 0>)
+3140: i220 = int_lt(i219, 0)
guard_false(i220, descr=<Guard197>) [p1, p0, p2, p5, p10, p12, p16, p155, None]
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #44 FOR_ITER')
+3150: jump(p0, p1, p2, p5, p10, p12, p155, p16, i215, p49, p50, descr=TargetToken(139951894600448))
+3161: --end of the loop--
[b235913901b] jit-log-opt-loop}
[b235923f653] {jit-backend
[b235925599b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914168d67 +0  488DA50000000049BB30C3FB16497F00004D8B3B4983C70149BB30C3FB16497F00004D893B4C8B7E404D0FB67C3F184983FF330F84000000004883C7014C8B7E084C39FF0F8C00000000B80000000048890425D0D1550141BBD01BF30041FFD3B802000000488D65D8415F415E415D415C5B5DC349BB00501614497F000041FFD31D1803C600000049BB00501614497F000041FFD31D1803C7000000
[b235925dd75] jit-backend-dump}
[b235925e447] {jit-backend-addr
bridge out of Guard 115 has address 7f4914168d67 to 7f4914168ddb
[b235925f0bd] jit-backend-addr}
[b235925f6af] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914168d6a +0  70FFFFFF
[b2359260251] jit-backend-dump}
[b2359260823] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914168d9c +0  3B000000
[b2359261641] jit-backend-dump}
[b2359261c11] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914168dad +0  3E000000
[b23592629c1] jit-backend-dump}
[b235926331b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141673d3 +0  90190000
[b235926459b] jit-backend-dump}
[b2359264f3d] jit-backend}
[b2359265ccd] {jit-log-opt-bridge
# bridge out of Guard 115 with 10 ops
[i0, p1]
debug_merge_point(0, 're StrLiteralSearch at 11/51 [17. 8. 3. 1. 1. 1. 1. 51. 0. 19. 51. 1]')
+37: p2 = getfield_gc(p1, descr=<FieldP pypy.rlib.rsre.rsre_core.StrMatchContext.inst__string 64>)
+41: i3 = strgetitem(p2, i0)
+47: i5 = int_eq(i3, 51)
guard_false(i5, descr=<Guard198>) [i0, p1]
+57: i7 = int_add(i0, 1)
+61: i8 = getfield_gc_pure(p1, descr=<FieldS pypy.rlib.rsre.rsre_core.AbstractMatchContext.inst_end 8>)
+65: i9 = int_lt(i7, i8)
guard_false(i9, descr=<Guard199>) [i7, p1]
+74: finish(0, descr=<DoneWithThisFrameDescrInt object at 0x1888940>)
+116: --end of the loop--
[b235927415b] jit-log-opt-bridge}
[b23597ef945] {jit-backend
[b2359822437] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914168e1b
[b2359827fa9] jit-backend-dump}
[b2359828573] {jit-backend-addr
bridge out of Guard 158 has address 7f4914168e1b to 7f4914168f59
[b235982902d] jit-backend-addr}
[b23598298f5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914168e1e +0  E0FDFFFF
[b235982a3e1] jit-backend-dump}
[b235982ac2d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914168e50 +0  05010000
[b235982b5a9] jit-backend-dump}
[b235982ba03] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914168e5e +0  1A010000
[b235982c329] jit-backend-dump}
[b235982c79d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914168ea0 +0  17010000
[b235982d073] jit-backend-dump}
[b235982d5e5] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167cb2 +0  65110000
[b235982e017] jit-backend-dump}
[b235982e7ad] jit-backend}
[b235982f3a9] {jit-log-opt-bridge
# bridge out of Guard 158 with 19 ops
[p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12]
debug_merge_point(1, '<code object search. file '/home/fijal/venv/pypy/lib-python/2.7/re.py'. line 139> #21 RETURN_VALUE')
+37: p13 = getfield_gc(p2, descr=<FieldP pypy.interpreter.executioncontext.ExecutionContext.inst_w_tracefunc 80>)
+48: guard_isnull(p13, descr=<Guard200>) [p0, p1, p2, p13, p5, p6, p7, p8, p9, p10, p4, p12, p11, p3]
+57: i14 = getfield_gc(p2, descr=<FieldU pypy.interpreter.executioncontext.ExecutionContext.inst_profilefunc 40>)
+61: i15 = int_is_true(i14)
guard_false(i15, descr=<Guard201>) [p0, p1, p2, p5, p6, p7, p8, p9, p10, p4, p12, p11, p3]
+71: p16 = getfield_gc(p2, descr=<FieldP pypy.interpreter.executioncontext.ExecutionContext.inst_topframeref 64>)
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #65 POP_TOP')
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #66 JUMP_ABSOLUTE')
setfield_gc(p2, p12, descr=<FieldP pypy.interpreter.executioncontext.ExecutionContext.inst_topframeref 64>)
+104: setfield_gc(p5, -3, descr=<FieldS JitVirtualRef.virtual_token 8>)
+119: guard_not_invalidated(, descr=<Guard202>) [p0, p1, p6, p7, p8, p9, p10, None, None, p11, None]
+119: i20 = getfield_raw(44057928, descr=<FieldS pypysig_long_struct.c_value 0>)
+127: i22 = int_lt(i20, 0)
guard_false(i22, descr=<Guard203>) [p0, p1, p6, p7, p8, p9, p10, None, None, p11, None]
debug_merge_point(0, '<code object inlined_str_stuff. file 'source.py'. line 40> #44 FOR_ITER')
p24 = new_with_vtable(ConstClass(W_StringObject))
+200: setfield_gc(p24, p11, descr=<FieldP pypy.objspace.std.stringobject.W_StringObject.inst__value 8>)
+211: jump(p1, p0, p6, ConstPtr(ptr25), 0, p7, 4, 44, p8, p9, p24, p10, ConstPtr(ptr29), ConstPtr(ptr30), ConstPtr(ptr30), ConstPtr(ptr30), descr=TargetToken(139951894600368))
+318: --end of the loop--
[b235984e7c1] jit-log-opt-bridge}
[b23598831dd] {jit-backend
[b2359893023] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914168fd8 +0  488DA50000000049BB60C3FB16497F00004D8B3B4983C70149BB60C3FB16497F00004D893B4989FF4883C70148897E1848C74620000000004C897E28B80100000048890425D0D1550141BBD01BF30041FFD3B802000000488D65D8415F415E415D415C5B5DC3
[b2359895b7f] jit-backend-dump}
[b2359896007] {jit-backend-addr
bridge out of Guard 112 has address 7f4914168fd8 to 7f491416903e
[b2359896843] jit-backend-addr}
[b2359896dfd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914168fdb +0  70FFFFFF
[b2359897815] jit-backend-dump}
[b2359897f39] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167316 +0  BE1C0000
[b23598989e5] jit-backend-dump}
[b2359899033] jit-backend}
[b23598998a9] {jit-log-opt-bridge
# bridge out of Guard 112 with 5 ops
[i0, p1]
+37: i3 = int_add(i0, 1)
+44: setfield_gc(p1, i3, descr=<FieldS pypy.rlib.rsre.rsre_core.AbstractMatchContext.inst_match_end 24>)
+48: setfield_gc(p1, ConstPtr(ptr4), descr=<FieldP pypy.rlib.rsre.rsre_core.AbstractMatchContext.inst_match_marks 32>)
+56: setfield_gc(p1, i0, descr=<FieldS pypy.rlib.rsre.rsre_core.AbstractMatchContext.inst_match_start 40>)
+60: finish(1, descr=<DoneWithThisFrameDescrInt object at 0x1888940>)
+102: --end of the loop--
[b235989f283] jit-log-opt-bridge}
[b23599d1a4b] {jit-backend
[b23599de1bf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f491416903e +0  488DA50000000049BB78C3FB16497F00004D8B3B4983C70149BB78C3FB16497F00004D893B4989FF4883C70148897E1848C74620000000004C897E28B80100000048890425D0D1550141BBD01BF30041FFD3B802000000488D65D8415F415E415D415C5B5DC3
[b23599e0c2d] jit-backend-dump}
[b23599e10a3] {jit-backend-addr
bridge out of Guard 114 has address 7f491416903e to 7f49141690a4
[b23599e195d] jit-backend-addr}
[b23599e1eb3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914169041 +0  70FFFFFF
[b23599e29ad] jit-backend-dump}
[b23599e2fdd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141673c2 +0  781C0000
[b23599e3a45] jit-backend-dump}
[b23599e403f] jit-backend}
[b23599e4823] {jit-log-opt-bridge
# bridge out of Guard 114 with 5 ops
[i0, p1]
+37: i3 = int_add(i0, 1)
+44: setfield_gc(p1, i3, descr=<FieldS pypy.rlib.rsre.rsre_core.AbstractMatchContext.inst_match_end 24>)
+48: setfield_gc(p1, ConstPtr(ptr4), descr=<FieldP pypy.rlib.rsre.rsre_core.AbstractMatchContext.inst_match_marks 32>)
+56: setfield_gc(p1, i0, descr=<FieldS pypy.rlib.rsre.rsre_core.AbstractMatchContext.inst_match_start 40>)
+60: finish(1, descr=<DoneWithThisFrameDescrInt object at 0x1888940>)
+102: --end of the loop--
[b23599ea139] jit-log-opt-bridge}
[b2359a1b785] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914166d1d +0  E9A0030000
[b2359a1d169] jit-backend-dump}
[b2359a1d6cb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914166e80 +0  E913030000
[b2359a23d25] jit-backend-dump}
[b2359a24497] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f491416781c +0  E9DD0B0000
[b2359a24f9f] jit-backend-dump}
[b2359a253b1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167872 +0  E9FE0B0000
[b2359a25ead] jit-backend-dump}
[b2359a2650b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167aea +0  E93E0B0000
[b2359a26f5d] jit-backend-dump}
[b2359a27471] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167d0b +0  E9240B0000
[b2359a27d99] jit-backend-dump}
[b2359a282bf] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914167dc4 +0  E94B0B0000
[b2359a28bd3] jit-backend-dump}
[b2359a29195] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914168072 +0  E9A10A0000
[b2359a29b6b] jit-backend-dump}
[b2359a2a075] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f491416829b +0  E9910A0000
[b2359a2ab3f] jit-backend-dump}
[b2359a2b029] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914168e92 +0  E907010000
[b2359a2b931] jit-backend-dump}
[b2359f69dd7] {jit-backend
[b2359fce6a9] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141690a
[b2359fd8aed] jit-backend-dump}
[b2359fd90c3] {jit-backend-addr
Loop 7 (<code object double_loop, file 'source.py', line 47> #38 FOR_ITER) has address 7f49141690da to 7f491416931f (bootstrap 7f49141690a4)
[b2359fd9f95] jit-backend-addr}
[b2359fda533] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141690d6 +0  10FFFFFF
[b2359fe22ef] jit-backend-dump}
[b2359fe2dc1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141691b3 +0  68010000
[b2359fe3943] jit-backend-dump}
[b2359fe3e5d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141691c7 +0  76010000
[b2359fe48e9] jit-backend-dump}
[b2359fe4db1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141691d4 +0  89010000
[b2359fe565f] jit-backend-dump}
[b2359fe5a45] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141691e8 +0  96010000
[b2359fe62cb] jit-backend-dump}
[b2359fe66ad] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914169202 +0  9F010000
[b2359fe6f21] jit-backend-dump}
[b2359fe7413] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f491416920b +0  BA010000
[b2359fe7df5] jit-backend-dump}
[b2359fe82e7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f491416922a +0  BE010000
[b2359fe8b5f] jit-backend-dump}
[b2359fe8f71] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f491416923c +0  CC010000
[b2359fe97e9] jit-backend-dump}
[b2359fe9bdd] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914169257 +0  CF010000
[b2359fea453] jit-backend-dump}
[b2359fea821] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914169267 +0  DD010000
[b2359feb237] jit-backend-dump}
[b2359feb729] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914169274 +0  ED010000
[b2359fec123] jit-backend-dump}
[b2359fec739] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914169286 +0  16020000
[b2359fecfe5] jit-backend-dump}
[b2359fed3c3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914169299 +0  20020000
[b2359fedc8d] jit-backend-dump}
[b2359fee073] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141692c7 +0  0F020000
[b2359fee915] jit-backend-dump}
[b2359feedf1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141692e8 +0  0C020000
[b2359fef873] jit-backend-dump}
[b2359fefd5f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141692f4 +0  1D020000
[b2359ff0697] jit-backend-dump}
[b2359ff0adb] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914169306 +0  47020000
[b2359ff136b] jit-backend-dump}
[b2359ff1b69] jit-backend}
[b2359ff38cf] {jit-log-opt-loop
# Loop 7 (<code object double_loop, file 'source.py', line 47> #38 FOR_ITER) : loop with 86 ops
[p0, p1]
+84: p2 = getfield_gc(p0, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_last_exception 80>)
+88: p3 = getfield_gc(p0, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_pycode 120>)
+92: i4 = getfield_gc(p0, descr=<FieldU pypy.interpreter.pyframe.PyFrame.inst_is_being_profiled 150>)
+100: p5 = getfield_gc(p0, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_lastblock 96>)
+104: i6 = getfield_gc(p0, descr=<FieldS pypy.interpreter.pyframe.PyFrame.inst_valuestackdepth 128>)
+111: i7 = getfield_gc(p0, descr=<FieldS pypy.interpreter.pyframe.PyFrame.inst_last_instr 88>)
+115: p8 = getfield_gc(p0, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_locals_stack_w 104>)
+119: p10 = getarrayitem_gc(p8, 0, descr=<ArrayP 8>)
+123: p12 = getarrayitem_gc(p8, 1, descr=<ArrayP 8>)
+127: p14 = getarrayitem_gc(p8, 2, descr=<ArrayP 8>)
+131: p16 = getarrayitem_gc(p8, 3, descr=<ArrayP 8>)
+135: p18 = getarrayitem_gc(p8, 4, descr=<ArrayP 8>)
+146: p20 = getarrayitem_gc(p8, 5, descr=<ArrayP 8>)
+157: p22 = getarrayitem_gc(p8, 6, descr=<ArrayP 8>)
+168: p24 = getarrayitem_gc(p8, 7, descr=<ArrayP 8>)
+172: p25 = getfield_gc(p0, descr=<FieldP pypy.interpreter.pyframe.PyFrame.inst_cells 40>)
+172: label(p0, p1, p2, p3, i4, p5, i6, i7, p10, p12, p14, p16, p18, p20, p22, p24, descr=TargetToken(139951894070880))
debug_merge_point(0, '<code object double_loop. file 'source.py'. line 47> #38 FOR_ITER')
+265: guard_value(i6, 5, descr=<Guard204>) [i6, p1, p0, p2, p3, i4, p5, i7, p10, p12, p14, p16, p18, p20, p22, p24]
+275: guard_class(p18, 38562496, descr=<Guard205>) [p1, p0, p18, p2, p3, i4, p5, p10, p12, p14, p16, p20, p22, p24]
+295: p28 = getfield_gc(p18, descr=<FieldP pypy.objspace.std.iterobject.W_AbstractSeqIterObject.inst_w_seq 16>)
+299: guard_nonnull(p28, descr=<Guard206>) [p1, p0, p18, p28, p2, p3, i4, p5, p10, p12, p14, p16, p20, p22, p24]
+308: i29 = getfield_gc(p18, descr=<FieldS pypy.objspace.std.iterobject.W_AbstractSeqIterObject.inst_index 8>)
+312: p30 = getfield_gc(p28, descr=<FieldP pypy.objspace.std.listobject.W_ListObject.inst_strategy 16>)
+316: guard_class(p30, 38745240, descr=<Guard207>) [p1, p0, p18, i29, p30, p28, p2, p3, i4, p5, p10, p12, p14, p16, p20, p22, p24]
+328: p32 = getfield_gc(p28, descr=<FieldP pypy.objspace.std.listobject.W_ListObject.inst_lstorage 8>)
+332: i33 = getfield_gc_pure(p32, descr=<FieldS tuple3.item0 8>)
+336: i34 = getfield_gc_pure(p32, descr=<FieldS tuple3.item1 16>)
+340: i35 = getfield_gc_pure(p32, descr=<FieldS tuple3.item2 24>)
+344: i37 = int_lt(i29, 0)
guard_false(i37, descr=<Guard208>) [p1, p0, p18, i29, i35, i34, i33, p2, p3, i4, p5, p10, p12, p14, p16, p20, p22, p24]
+354: i38 = int_ge(i29, i35)
guard_false(i38, descr=<Guard209>) [p1, p0, p18, i29, i34, i33, p2, p3, i4, p5, p10, p12, p14, p16, p20, p22, p24]
+363: i39 = int_mul(i29, i34)
+370: i40 = int_add(i33, i39)
+376: i42 = int_add(i29, 1)
+380: setfield_gc(p18, i42, descr=<FieldS pypy.objspace.std.iterobject.W_AbstractSeqIterObject.inst_index 8>)
+384: guard_value(i4, 0, descr=<Guard210>) [i4, p1, p0, p2, p3, p5, p10, p12, p14, p16, p18, p22, p24, i40]
debug_merge_point(0, '<code object double_loop. file 'source.py'. line 47> #41 STORE_FAST')
debug_merge_point(0, '<code object double_loop. file 'source.py'. line 47> #44 LOAD_FAST')
+394: guard_nonnull_class(p10, ConstClass(W_IntObject), descr=<Guard211>) [p1, p0, p10, p2, p3, p5, p12, p16, p18, p22, p24, i40]
debug_merge_point(0, '<code object double_loop. file 'source.py'. line 47> #47 LOAD_FAST')
+412: guard_nonnull_class(p12, ConstClass(W_IntObject), descr=<Guard212>) [p1, p0, p12, p2, p3, p5, p10, p16, p18, p22, p24, i40]
debug_merge_point(0, '<code object double_loop. file 'source.py'. line 47> #50 LOAD_FAST')
debug_merge_point(0, '<code object double_loop. file 'source.py'. line 47> #53 BINARY_ADD')
+439: i46 = getfield_gc_pure(p12, descr=<FieldS pypy.objspace.std.intobject.W_IntObject.inst_intval 8>)
+443: i47 = int_add_ovf(i46, i40)
guard_no_overflow(, descr=<Guard213>) [p1, p0, p12, i47, p2, p3, p5, p10, p16, p18, i40]
debug_merge_point(0, '<code object double_loop. file 'source.py'. line 47> #54 INPLACE_ADD')
+455: i48 = getfield_gc_pure(p10, descr=<FieldS pypy.objspace.std.intobject.W_IntObject.inst_intval 8>)
+459: i49 = int_add_ovf(i48, i47)
guard_no_overflow(, descr=<Guard214>) [p1, p0, p10, i49, p2, p3, p5, p12, p16, p18, i47, i40]
debug_merge_point(0, '<code object double_loop. file 'source.py'. line 47> #55 STORE_FAST')
debug_merge_point(0, '<code object double_loop. file 'source.py'. line 47> #58 JUMP_ABSOLUTE')
+468: guard_not_invalidated(, descr=<Guard215>) [p1, p0, p2, p3, p5, p12, p16, p18, i49, None, i40]
+468: i52 = getfield_raw(44057928, descr=<FieldS pypysig_long_struct.c_value 0>)
+476: i54 = int_lt(i52, 0)
guard_false(i54, descr=<Guard216>) [p1, p0, p2, p3, p5, p12, p16, p18, i49, None, i40]
+486: guard_value(p3, ConstPtr(ptr55), descr=<Guard217>) [p1, p0, p3, p2, p5, p12, p16, p18, i49, None, i40]
debug_merge_point(0, '<code object double_loop. file 'source.py'. line 47> #38 FOR_ITER')
+505: label(p0, p1, p2, p5, i49, p12, i40, p16, p18, i42, i35, i34, i33, i46, descr=TargetToken(139951894070960))
debug_merge_point(0, '<code object double_loop. file 'source.py'. line 47> #38 FOR_ITER')
+542: i56 = int_ge(i42, i35)
guard_false(i56, descr=<Guard218>) [p1, p0, p18, i42, i34, i33, p2, p5, p12, p16, i49, i40]
+551: i57 = int_mul(i42, i34)
+558: i58 = int_add(i33, i57)
+564: i59 = int_add(i42, 1)
debug_merge_point(0, '<code object double_loop. file 'source.py'. line 47> #41 STORE_FAST')
debug_merge_point(0, '<code object double_loop. file 'source.py'. line 47> #44 LOAD_FAST')
debug_merge_point(0, '<code object double_loop. file 'source.py'. line 47> #47 LOAD_FAST')
debug_merge_point(0, '<code object double_loop. file 'source.py'. line 47> #50 LOAD_FAST')
debug_merge_point(0, '<code object double_loop. file 'source.py'. line 47> #53 BINARY_ADD')
+568: setfield_gc(p18, i59, descr=<FieldS pypy.objspace.std.iterobject.W_AbstractSeqIterObject.inst_index 8>)
+572: i60 = int_add_ovf(i46, i58)
guard_no_overflow(, descr=<Guard219>) [p1, p0, p12, i60, p2, p5, p16, p18, i58, i49, None]
debug_merge_point(0, '<code object double_loop. file 'source.py'. line 47> #54 INPLACE_ADD')
+584: i61 = int_add_ovf(i49, i60)
guard_no_overflow(, descr=<Guard220>) [p1, p0, i61, p2, p5, p12, p16, p18, i60, i58, i49, None]
debug_merge_point(0, '<code object double_loop. file 'source.py'. line 47> #55 STORE_FAST')
debug_merge_point(0, '<code object double_loop. file 'source.py'. line 47> #58 JUMP_ABSOLUTE')
+596: guard_not_invalidated(, descr=<Guard221>) [p1, p0, p2, p5, p12, p16, p18, i61, None, i58, None, None]
+596: i62 = getfield_raw(44057928, descr=<FieldS pypysig_long_struct.c_value 0>)
+604: i63 = int_lt(i62, 0)
guard_false(i63, descr=<Guard222>) [p1, p0, p2, p5, p12, p16, p18, i61, None, i58, None, None]
debug_merge_point(0, '<code object double_loop. file 'source.py'. line 47> #38 FOR_ITER')
+614: jump(p0, p1, p2, p5, i61, p12, i58, p16, p18, i59, i35, i34, i33, i46, descr=TargetToken(139951894070960))
+635: --end of the loop--
[b235a03f1e7] jit-log-opt-loop}
[b235a456299] {jit-backend
[b235a6f3e61] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f
[b235a6fc6cf] jit-backend-dump}
[b235a6fce13] {jit-backend-addr
bridge out of Guard 218 has address 7f4914169581 to 7f4914169809
[b235a6fda0d] jit-backend-addr}
[b235a6fdfb1] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914169584 +0  80FEFFFF
[b235a6feb1d] jit-backend-dump}
[b235a6ff177] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141695c4 +0  41020000
[b235a6ffcb7] jit-backend-dump}
[b235a7001ed] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141695d3 +0  4D020000
[b235a700d4b] jit-backend-dump}
[b235a708f67] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141695e5 +0  70020000
[b235a709c8d] jit-backend-dump}
[b235a70a183] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141695fa +0  75020000
[b235a70ab7b] jit-backend-dump}
[b235a70b035] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914169608 +0  81020000
[b235a70ba99] jit-backend-dump}
[b235a70bf8b] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f491416961e +0  86020000
[b235a70c957] jit-backend-dump}
[b235a70cd49] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914169638 +0  89020000
[b235a70d5cf] jit-backend-dump}
[b235a70d991] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914169641 +0  9E020000
[b235a70e201] jit-backend-dump}
[b235a70e5f7] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914169672 +0  8A020000
[b235a70ee8b] jit-backend-dump}
[b235a70f28f] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f4914169689 +0  8E020000
[b235a70fcd7] jit-backend-dump}
[b235a7101c3] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f491416969e +0  95020000
[b235a710b9f] jit-backend-dump}
[b235a71113d] {jit-backend-dump
BACKEND x86_64
SYS_EXECUTABLE pypy
CODE_DUMP @7f49141692c7 +0  B6020000
[b235a7119b9] jit-backend-dump}
[b235a712125] jit-backend}
[b235a7131a7] {jit-log-opt-bridge
# bridge out of Guard 218 with 61 ops
[p0, p1, p2, i3, i4, i5, p6, p7, p8, p9, i10, i11]
debug_merge_point(0, '<code object double_loop. file 'source.py'. line 47> #61 POP_BLOCK')
+37: p12 = getfield_gc_pure(p7, descr=<FieldP pypy.interpreter.pyopcode.FrameBlock.inst_previous 16>)
+49: setfield_gc(p2, ConstPtr(ptr13), descr=<FieldP pypy.objspace.std.iterobject.W_AbstractSeqIterObject.inst_w_seq 16>)
+57: guard_class(p7, 38639224, descr=<Guard223>) [p0, p1, p7, p6, p12, p8, p9, i10, i11]
+71: i15 = getfield_gc_pure(p7, descr=<FieldS pypy.interpreter.pyopcode.FrameBlock.inst_valuestackdepth 24>)
+76: guard_value(i15, 4, descr=<Guard224>) [p0, p1, i15, p6, p12, p8, p9, i10, i11]
debug_merge_point(0, '<code object double_loop. file 'source.py'. line 47> #62 JUMP_ABSOLUTE')
+86: guard_not_invalidated(, descr=<Guard225>) [p0, p1, p6, p12, p8, p9, i10, i11]
+86: i18 = getfield_raw(44057928, descr=<FieldS pypysig_long_struct.c_value 0>)
+94: i20 = int_lt(i18, 0)
guard_false(i20, descr=<Guard226>) [p0, p1, p6, p12, p8, p9, i10, i11]
debug_merge_point(0, '<code object double_loop. file 'source.py'. line 47> #19 FOR_ITER')
+104: guard_class(p9, 38562496, descr=<Guard227>) [p0, p1, p9, p6, p12, p8, i10, i11]
+125: p22 = getfield_gc(p9, descr=<FieldP pypy.objspace.std.iterobject.W_AbstractSeqIterObject.inst_w_seq 16>)
+130: guard_nonnull(p22, descr=<Guard228>) [p0, p1, p9, p22, p6, p12, p8, i10, i11]
+139: i23 = getfield_gc(p9, descr=<FieldS pypy.objspace.std.iterobject.W_AbstractSeqIterObject.inst_index 8>)
+144: p24 = getfield_gc(p22, descr=<FieldP pypy.objspace.std.listobject.W_ListObject.inst_strategy 16>)
+148: guard_class(p24, 38745240, descr=<Guard229>) [p0, p1, p9, i23, p24, p22, p6, p12, p8, i10, i11]
+161: p26 = getfield_gc(p22, descr=<FieldP pypy.objspace.std.listobject.W_ListObject.inst_lstorage 8>)
+165: i27 = getfield_gc_pure(p26, descr=<FieldS tuple3.item0 8>)
+169: i28 = getfield_gc_pure(p26, descr=<FieldS tuple3.item1 16>)
+173: i29 = getfield_gc_pure(p26, descr=<FieldS tuple3.item2 24>)
+177: i31 = int_lt(i23, 0)
guard_false(i31, descr=<Guard230>) [p0, p1, p9, i23, i29, i28, i27, p6, p12, p8, i10, i11]
+187: i32 = int_ge(i23, i29)
guard_false(i32, descr=<Guard231>) [p0, p1, p9, i23, i28, i27, p6, p12, p8, i10, i11]
+196: i33 = int_mul(i23, i28)
+203: i34 = int_add(i27, i33)
+206: i36 = int_add(i23, 1)
debug_merge_point(0, '<code object double_loop. file 'source.py'. line 47> #22 STORE_FAST')
debug_merge_point(0, '<code object double_loop. file 'source.py'. line 47> #25 SETUP_LOOP')
debug_merge_point(0, '<code object double_loop. file 'source.py'. line 47> #28 LOAD_GLOBAL')
+210: p37 = getfield_gc(p1, descr=<FieldP pypy.interpreter.eval.Frame.inst_w_globals 8>)
+221: setfield_gc(p9, i36, descr=<FieldS pypy.objspace.std.iterobject.W_AbstractSeqIterObject.inst_index 8>)
+226: guard_value(p37, ConstPtr(ptr38), descr=<Guard232>) [p0, p1, p37, p6, p9, p12, i34, i10, i11]
+245: p39 = getfield_gc(p37, descr=<FieldP pypy.objspace.std.dictmultiobject.W_DictMultiObject.inst_strategy 16>)
+249: guard_value(p39, ConstPtr(ptr40), descr=<Guard233>) [p0, p1, p39, p37, p6, p9, p12, i34, i10, i11]
+268: p42 = getfield_gc(ConstPtr(ptr41), descr=<FieldP pypy.objspace.std.dictmultiobject.W_DictMultiObject.inst_strategy 16>)
+276: guard_value(p42, ConstPtr(ptr43), descr=<Guard234>) [p0, p1, p42, p6, p9, p12, i34, i10, i11]
debug_merge_point(0, '<code object double_loop. file 'source.py'. line 47> #31 LOAD_CONST')
debug_merge_point(0, '<code object double_loop. file 'source.py'. line 47> #34 CALL_FUNCTION')
debug_merge_point(0, '<code object double_loop. file 'source.py'. line 47> #37 GET_ITER')
debug_merge_point(0, '<code object double_loop. file 'source.py'. line 47> #38 FOR_ITER')
+289: p44 = same_as(ConstPtr(ptr40))
+289: label(p1, p0, p6, p12, i10, i34, i11, p9, descr=TargetToken(139951894075920))
p46 = new_with_vtable(38639224)
p48 = new_with_vtable(ConstClass(W_IntObject))
p50 = new_with_vtable(ConstClass(W_IntObject))
+420: setfield_gc(p48, i10, descr=<FieldS pypy.objspace.std.intobject.W_IntObject.inst_intval 8>)
p52 = new_with_vtable(ConstClass(W_IntObject))
+439: setfield_gc(p50, i34, descr=<FieldS pypy.objspace.std.intobject.W_IntObject.inst_intval 8>)
p54 = new_with_vtable(38562496)
p56 = new_with_vtable(ConstClass(W_ListObject))
+471: setfield_gc(p46, 4, descr=<FieldS pypy.interpreter.pyopcode.FrameBlock.inst_valuestackdepth 24>)
+479: setfield_gc(p46, 62, descr=<FieldU pypy.interpreter.pyopcode.FrameBlock.inst_handlerposition 8>)
+487: setfield_gc(p46, p12, descr=<FieldP pypy.interpreter.pyopcode.FrameBlock.inst_previous 16>)
+498: setfield_gc(p52, i11, descr=<FieldS pypy.objspace.std.intobject.W_IntObject.inst_intval 8>)
+509: setfield_gc(p56, ConstPtr(ptr59), descr=<FieldP pypy.objspace.std.listobject.W_ListObject.inst_strategy 16>)
+517: setfield_gc(p56, ConstPtr(ptr60), descr=<FieldP pypy.objspace.std.listobject.W_ListObject.inst_lstorage 8>)
+531: setfield_gc(p54, p56, descr=<FieldP pypy.objspace.std.iterobject.W_AbstractSeqIterObject.inst_w_seq 16>)
+535: jump(p1, p0, p6, ConstPtr(ptr61), 0, p46, 5, 37, p48, p50, p52, p9, p54, ConstPtr(ptr65), ConstPtr(ptr66), ConstPtr(ptr66), descr=TargetToken(139951894070880))
+648: --end of the loop--
[b235a749cb7] jit-log-opt-bridge}
[b235ad8336b] {jit-backend-counts
entry 0:1
TargetToken(139951847702960):1
TargetToken(139951847703040):41
entry 1:1
TargetToken(139951847708240):1
TargetToken(139951847708320):41
entry 2:4647
TargetToken(139951847709440):4647
TargetToken(139951847709520):9292
entry 3:201
TargetToken(139951847710560):201
TargetToken(139951847710640):4468
bridge 41:4446
bridge 58:4268
TargetToken(139951894596208):4268
entry 4:1
TargetToken(139951894599248):1
TargetToken(139951894599328):1938
entry 5:3173
bridge 110:2882
bridge 113:2074
bridge 111:158
entry 6:377
TargetToken(139951894600368):527
TargetToken(139951894600448):1411
bridge 115:1420
bridge 158:150
bridge 112:50
bridge 114:7
entry 7:201
TargetToken(139951894070880):9990
TargetToken(139951894070960):998737
bridge 218:9790
TargetToken(139951894075920):9789
[b235ad8be63] jit-backend-counts}
